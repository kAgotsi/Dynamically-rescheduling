/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2019 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.base.skills.toagent

import io.sarl.core.Behaviors
import io.sarl.lang.core.Address
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.lang.core.Scope
import java.util.Comparator
import java.util.List
import java.util.UUID
import org.arakhne.afc.simulation.framework.base.events.Perception
import org.arakhne.afc.simulation.framework.base.events.SimulationEvent
import org.arakhne.afc.simulation.framework.base.time.TimeManager
import org.arakhne.afc.util.Triplet

import static extension org.arakhne.afc.util.ListUtil.*
import io.sarl.javafx.AppExit
import io.sarl.core.Destroy
import org.arakhne.afc.simulation.framework.base.events.SimulationAgentReady

/** 
 * Class that handles the events in a synchronized way
 * 
 * @author $Author: sgalland$
 * @author $Author: gcich$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
package class SynchronizedEventBuffer implements EventListener {

	/** Comparator used for sorting the lists of buffered events. */
	static val EVENT_COMPARATOR : Comparator<Triplet<Event, Scope<Address>, Double>> = [a, b |
		assert a !== null
		assert b !== null
		a.c <=> b.c
	]

	/** 
	 * id of the agent
	 */
	val id : UUID

	val delegate : Behaviors

	/** 
	 * firable events (= events to other agents)
	 */
	var firableEvents = <Triplet<Event, Scope<Address>, Double>>newArrayList

	/** 
	 * wakable event (= events to own agent)
	 */
	var wakableEvents = <Triplet<Event, Scope<Address>, Double>>newArrayList

	/** 
	 * current time
	 */
	var currentTime = 0.0

	/** 
	 * time step
	 */
	var timeStep = 0.0

	/** 
	 * Factor for retreiving the OS time from the simulation time.
	 */
	var osTimeFactor = 1.0
	
	/** 
	 * Constructor
	 * 
	 * @param id id of the agent
	 * @param delegate the original behavior skill
	 */
	new (id : UUID, delegate : Behaviors) {
		this.id = id
		this.delegate = delegate
	}

	private static def toEventDef(t : double) : Triplet<Event, Scope<Address>, Double> {
		new Triplet(new Event {}, null, t)
	}

	private static def getLastEvent(list : List<Triplet<Event, Scope<Address>, Double>>,
		element : Triplet<Event, Scope<Address>, Double>) : int {
		var index = list.getInsertionIndex(EVENT_COMPARATOR, element)
		val max = list.size - 1
		while (index < max && EVENT_COMPARATOR.compare(element, list.get(index + 1)) <= 0) {
			index++
		}
		return index
	}

	/** 
	 * Gets the size of the firable events for a certain timestamp
	 * 
	 * @param timestamp timestamp that needs to be checked
	 * @return size of firable events for a certain timestamp
	 */
	synchronized def getSizeOfFirableEventsOnTimeStamp(timestamp : double) : int {
		this.firableEvents.getLastEvent(timestamp.toEventDef) + 1
	}

	/** 
	 * Gets the size of the wakable events for a certain timestamp
	 * 
	 * @param timestamp timestamp that needs to be checked
	 * @return size of wakable events for a certain timestamp
	 */
	synchronized def getSizeOfWakableEventsOnTimeStamp(timestamp : double) : int {
		this.wakableEvents.getLastEvent(timestamp.toEventDef) + 1
	}

	/** 
	 * Gets current timestamp
	 * 
	 * @return current timestamp
	 */
	synchronized def getCurrentTime : double {
		this.currentTime
	}

	/** 
	 * Gets simulation time step.
	 * 
	 * @return the simulation time step.
	 */
	synchronized def getTimeStep : double {
		this.timeStep
	}

	/** 
	 * Gets the factor that permits to retreive the OS time from the simulated time.
	 * 
	 * @return the OS time factor.
	 */
	synchronized def getOSTimeFactor : double {
		this.osTimeFactor
	}
	
	/** 
	 * Gets next simulation time.
	 * 
	 * @return the simulation time step.
	 */
	synchronized def getNextTime : double {
		this.currentTime + this.timeStep
	}

	/** 
	 * Gets the id of the agent
	 */
	override getID : UUID {
		this.id
	}

	/** 
	 * Checks whether an event is safe regarding the time
	 * Events can only happen in the future
	 * 
	 * @param timestamp timestamp of the event
	 */
	def isCausalitySafe(timestamp : double) : boolean {
		return (this.currentTime.doubleValue <=> timestamp) <= 0
	}

	private static def addEventToBuffer(buffer : List<Triplet<Event, Scope<Address>, Double>>, ^event : Event,
		scope : Scope<Address>, t : double) : void {
		val entry = new Triplet(^event, scope, t)
		buffer.add(EVENT_COMPARATOR, entry, true, false)
	}

	/** 
	 * Adds a firable event to the buffer
	 * 
	 * @param ^event received event
	 * @param scope the scope for the event.
	 * @param t the timestamp for the event.
	 */
	synchronized def addEventToFirableEventsBuffer(^event : Event, t : double) {
		this.firableEvents.addEventToBuffer(^event, null, t)
	}

	/** 
	 * Adds a wakable event to the buffer
	 * 
	 * @param ^event received event
	 * @param scope the scope for the event.
	 * @param t the timestamp for the event.
	 */
	synchronized def addEventToWakableEventsBuffer(^event : Event, scope : Scope<Address>, t : double) {
		this.wakableEvents.addEventToBuffer(^event, scope, t)
	}

	/** 
	 * Adds a firable event to the buffer
	 * 
	 * @param ^event received event
	 */
	def addEventToFirableEventsBuffer(^event : SimulationEvent) {
		^event.addEventToFirableEventsBuffer(^event.t)
	}
	
	/** 
	 * Adds a wakable event to the buffer
	 * 
	 * @param ^event received event
	 * @param scope the scope for the event.
	 */
	synchronized def addEventToWakableEventsBuffer(^event : SimulationEvent, scope : Scope<Address>) {
		^event.addEventToWakableEventsBuffer(scope, ^event.t)
	}

	protected def isDirectEvent(^event : Event) : boolean {
		return ^event instanceof AppExit || ^event instanceof Destroy
			|| ^event instanceof SimulationAgentReady
	}
	
	/** 
	 * Called when an event from another agent is received.
	 * 
	 * @param ^event the event to dispatch into the agent.
	 * received event
	 */
	synchronized override receiveEvent(^event : Event)  {
		if (^event.isDirectEvent) {
			this.delegate.asEventListener.receiveEvent(^event)
		} else if (^event instanceof Perception) {
			if (^event.t.isCausalitySafe) {
				this.currentTime = ^event.t
				this.timeStep = ^event.timeStep
				this.osTimeFactor = ^event.osTimeFactor
				fireWakableEventsOutOfBuffer
				fireFirableEventsOutOfBuffer
				this.delegate.asEventListener.receiveEvent(^event)
			}
		} else if (^event instanceof SimulationEvent) {
			if (^event.t.isCausalitySafe) {
				^event.addEventToFirableEventsBuffer
			}
		} else {
			^event.addEventToFirableEventsBuffer(TimeManager::AS_SOON_AS_POSSIBLE)
		}
	}

	/** 
	 * Called when a event is fired into the agent.
	 * 
	 * @param event received event
	 * @param scope the scope of the event.
	 */
	synchronized def wake(^event : Event, scope : Scope<Address> = null) {
		if (^event.isDirectEvent) {
			this.delegate.wake(^event, scope)
		} else if (^event instanceof SimulationEvent) {
			if (^event.t.isCausalitySafe) {
				^event.addEventToWakableEventsBuffer(scope)
			}
		} else {
			^event.addEventToWakableEventsBuffer(scope, TimeManager::AS_SOON_AS_POSSIBLE)
		}
	}

	/** 
	 * Fire all the firable events out of the buffer according to the current time
	 */
	synchronized def fireFirableEventsOutOfBuffer : void {
		if (!this.firableEvents.empty) {
			val iterator = this.firableEvents.iterator
			var lastIndex = -1
			val current = this.currentTime.toEventDef
			val events = <Event>newLinkedList
			while (iterator.hasNext) {
				val entry = iterator.next
				if (EVENT_COMPARATOR.compare(entry, current) <= 0) {
					events += entry.a
					lastIndex++
				} else {
					break;
				}
			}
			this.firableEvents.subList(0, lastIndex).clear
			events.forEach[this.delegate.asEventListener.receiveEvent(it)]
		}
	}
	
	/** 
	 * Fire all the wakable events out of the buffer according to the current time
	 */
	synchronized def fireWakableEventsOutOfBuffer() : void {
		if (!this.wakableEvents.empty) {
			val iterator = this.wakableEvents.iterator
			var lastIndex = -1
			val current = this.currentTime.toEventDef
			val events = <Triplet<Event, Scope<Address>, Double>>newLinkedList
			while (iterator.hasNext) {
				val entry = iterator.next
				if (EVENT_COMPARATOR.compare(entry, current) <= 0) {
					events += entry
					lastIndex++
				} else {
					break;
				}
			}
			this.wakableEvents.subList(0, lastIndex).clear
			events.forEach[this.delegate.wake(it.a, it.b)]
		}
	}

}
