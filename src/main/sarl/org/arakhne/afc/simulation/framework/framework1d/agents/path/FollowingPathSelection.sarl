/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2019 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.framework1d.agents.path

import org.arakhne.afc.gis.road.path.RoadPath
import org.arakhne.afc.gis.road.primitive.RoadSegment
import org.arakhne.afc.gis.road.primitive.RoadSegmentContainer
import org.arakhne.afc.math.geometry.d1.Direction1D
import org.arakhne.afc.math.geometry.d1.d.Point1d

/**
 * Update the path by removing only the segments that are encountered.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
skill FollowingPathSelection implements PathSelection {

	override updatePath(path : RoadPath, roads : RoadSegmentContainer, currentPosition : Point1d,
		viewDirection : Direction1D) : boolean {
		var currentSegment = currentPosition.segment as RoadSegment
		var entryPoint = if (viewDirection.segmentDirection) currentSegment.beginPoint else currentSegment.endPoint

		if (path.empty) {
			path.add(currentSegment, entryPoint)
		} else {
			// Remove the first segment on the path if it is leaved away.
			var  sgmt = path.firstSegment
			var pt = path.firstPoint
			if (sgmt != currentSegment || pt != entryPoint) {
				var success = path.removeBefore(currentSegment, entryPoint)
				assert success, "invalid path update"
				return true
			}
		}
		return false
	}

}
