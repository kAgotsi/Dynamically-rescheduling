/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2019 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.base.probes

import java.io.File
import java.util.UUID
import javafx.scene.chart.XYChart.Series
import org.arakhne.afc.simulation.framework.base.time.TimeManager

/**
 * A probe.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
interface Probe {

	/** Replies the probe manager in which this probe is stored. */
	@Pure
	def getProbeManager : ProbeManager

	/** Change the probe manager in which this probe is stored.
	 */
	def setProbeManager(manager : ProbeManager)

	/** Replies the identifier of the probe.
	 */
	@Pure
	def getID : UUID

	/** Change the identifier of the probe.
	 */
	def setID(id : UUID)

	/** Replies the name of the probe.
	 */
	@Pure
	def getName : String

	/** Change the name of the probe.
	 */
	def setName(name : String)
	
	/** Replies the name of the probe, or its identifier if there is no name.
	 */
	@Pure
	def getNameOrID : String {
		var n = getName
		if (n.nullOrEmpty) {
			return getID.toString as String
		}
		return n
	}
	
	/** Collect data.
	 *
	 * @param time the manager of time
	 * @param rootFolder the folder that contains all the probe outputs.
	 */
	def run(time : TimeManager, rootFolder : File)

	/** Close the probe.
	 */
	def close

	/** Replies the XY chart's series the may be filled by this probe for output on a chart.
	 * 
	 * @return the series, or {@code null} if none. 
	 */
	def getChartSeries : Series<Double, Double> {
		null
	}

}
