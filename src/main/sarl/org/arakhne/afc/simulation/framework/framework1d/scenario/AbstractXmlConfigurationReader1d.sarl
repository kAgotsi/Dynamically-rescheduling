/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2019 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.framework1d.scenario

import io.sarl.lang.core.Agent
import java.io.File
import java.util.ResourceBundle
import org.arakhne.afc.simulation.framework.base.scenario.AbstractXmlConfigurationReader
import org.arakhne.afc.simulation.framework.framework1d.config.AbstractConfiguration1d
import org.arakhne.afc.simulation.framework.framework1d.config.LayerConfig
import org.arakhne.afc.simulation.framework.framework1d.config.ObjectGroupConfig
import org.arakhne.afc.simulation.framework.framework1d.config.RoadObjectConfig
import org.arakhne.afc.simulation.framework.framework1d.environment.RoadObject
import org.w3c.dom.Document

import static extension org.arakhne.afc.inputoutput.xml.XMLUtil.*
import static extension org.arakhne.afc.vmutil.FileSystem.*
import static extension org.arakhne.afc.util.ResourceBundles.*

/** 
 * Reader of xml file that contains a configuration definition.
 *
 * @param <T> the type of the configuration to read.
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
abstract class AbstractXmlConfigurationReader1d<T extends AbstractConfiguration1d>
		extends AbstractXmlConfigurationReader<T> {

	/** Definition of a layer configuration instance.
	 * @return the instance.
	 */
	def createLayerConfig : LayerConfig {
		new LayerConfig
	}

	/** Definition of a objects' group configuration instance.
	 * @return the instance.
	 */
	def createObjectGroupConfig : ObjectGroupConfig {
		new ObjectGroupConfig
	}

	/** Definition of a object's configuration instance.
	 * @return the instance.
	 */
	def createRoadObjectConfig : RoadObjectConfig {
		new RoadObjectConfig
	}
	
	protected def loadXmlConfiguration(config : T, file : File, xml : Document, bundle : ResourceBundle) : void {
		super.loadXmlConfiguration(config, file, xml, bundle)
		config.roadNetwork = xml.getAttributeValue("scenario", "roadNetwork", "file").convertStringToFile.makeAbsolute(
			file.parentFile)
		
		for (child : xml.getElementsFromPath("scenario", "layers", "layer")) {
			if (child.getAttributeBooleanWithDefault(true, "enable")) {
				var obj = createLayerConfig
				obj.ID = child.getAttributeUUID("id", "layer")
				obj.name = bundle.getStringOrKey(child.getAttributeValueWithDefault(null, "name"))
				obj.file = child.getAttributeValue("file").convertStringToFile.makeAbsolute(file.parentFile)
				config.layers += obj
			}
		}
		
		for (child : xml.getElementsFromPath("scenario", "roadObjects", "group")) {
			if (child.getAttributeBooleanWithDefault(true, "enable")) {
				var obj = createObjectGroupConfig
				obj.ID = child.getAttributeUUID("id", "group")
				obj.name = bundle.getStringOrKey(child.getAttributeValueWithDefault(null, "name"))
				obj.type = child.getAttributeClassWithDefault(null, "type")
				for (child0 : child.getElementsFromPath("roadObject")) {
					if (child0.getAttributeBooleanWithDefault(true, "enable")) {
						var obj0 = createRoadObjectConfig
						obj0.ID = child0.getAttributeUUID("id", "object")
						obj0.x = child0.getAttributeDoubleWithDefault(0.0, "x")
						obj0.y = child0.getAttributeDoubleWithDefault(0.0, "y")
						obj0.type = child0.getAttributeClassWithDefault(null, "type") as Class<? extends RoadObject>
						obj0.agentType = child0.getAttributeClassWithDefault(null, "agent") as Class<? extends Agent>
						obj0.text = child0.getText?.trim
						obj.roadObjects += obj0
					}
				}
				if (!obj.roadObjects.isEmpty) {
					config.roadObjectGroups += obj
				}
			}
		}
	}

}
