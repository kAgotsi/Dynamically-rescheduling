/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2019 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.arakhne.afc.simulation.framework.framework1d.environment

import org.arakhne.afc.gis.road.primitive.RoadConnection
import org.arakhne.afc.gis.road.primitive.RoadSegment
import org.arakhne.afc.math.MathUtil
import org.arakhne.afc.math.geometry.d1.Direction1D
import org.arakhne.afc.math.geometry.d1.Transform1D
import org.arakhne.afc.math.geometry.d1.Vector1D
import org.arakhne.afc.math.geometry.d1.d.Point1d
import org.arakhne.afc.math.geometry.d1.d.Vector1d
import org.arakhne.afc.math.physics.MeasureUnitUtil
import org.arakhne.afc.math.physics.PhysicsUtil
import org.arakhne.afc.math.physics.SpeedUnit
import org.arakhne.afc.math.physics.kinematic.linear.LinearAccelerationKinematic
import org.arakhne.afc.math.physics.kinematic.linear.LinearInstantAccelerationKinematic
import org.arakhne.afc.simulation.framework.base.time.TimeManager
import org.arakhne.afc.simulation.framework.framework1d.preferences.PreferenceManager1d

/**
 * Mobile object.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class MobileRoadObject extends AbstractMapPointRoadObject implements LinearInstantAccelerationKinematic, LinearAccelerationKinematic {

	var roadEntry : RoadConnection

	var linearVelocity = new Vector1d

	var linearAcceleration = 0.0

	var maxLinearAcceleration = Double::NEGATIVE_INFINITY

	var maxLinearDeceleration = Double::NEGATIVE_INFINITY

	var maxLinearSpeed = Double::NEGATIVE_INFINITY

	def getRoadEntry : RoadConnection {
		this.roadEntry
	}

	def setRoadEntry(entryPoint : RoadConnection) {
		this.roadEntry = entryPoint
	}

	override getMaxLinearAcceleration : double {
		if (this.maxLinearAcceleration < 0.0) {
			this.maxLinearAcceleration = PreferenceManager1d::singleton.objectMaximumAcceleration
		}
		return this.maxLinearAcceleration
	}
	
	override getMaxLinearAcceleration(speedUnit : SpeedUnit) : double {
		MeasureUnitUtil::convert(this.maxLinearAcceleration, SpeedUnit::METERS_PER_SECOND, speedUnit)
	}

	def setMaxLinearAcceleration(acc : double) {
		if (acc > 0.0) {
			this.maxLinearAcceleration = acc
		} else {
			this.maxLinearAcceleration = 0.0
		}
	}

	override getMaxLinearDeceleration : double {
		if (this.maxLinearDeceleration < 0.0) {
			this.maxLinearDeceleration = PreferenceManager1d::singleton.objectMaximumDeceleration
		}
		return this.maxLinearDeceleration
	}

	override getMaxLinearDeceleration(speedUnit : SpeedUnit) : double {
		MeasureUnitUtil::convert(this.maxLinearDeceleration, SpeedUnit::METERS_PER_SECOND, speedUnit)
	}

	def setMaxLinearDeceleration(dec : double) {
		if (dec > 0.0) {
			this.maxLinearDeceleration = dec
		} else {
			this.maxLinearDeceleration = 0.0
		}
	}

	override getMaxLinearSpeed : double {
		if (this.maxLinearSpeed < 0.0) {
			this.maxLinearSpeed = PreferenceManager1d::singleton.objectMaximumSpeed
		}
		return this.maxLinearSpeed
	}

	override getMaxLinearSpeed(speedUnit : SpeedUnit) : double {
		MeasureUnitUtil::convert(this.maxLinearSpeed, SpeedUnit::METERS_PER_SECOND, speedUnit)
	}

	def setMaxLinearSpeed(speed : double) {
		if (speed > 0.0) {
			this.maxLinearSpeed = speed
		} else {
			this.maxLinearSpeed = 0.0
		}
	}

	override getLinearSpeed : double {
		this.linearVelocity.x
	}

	override getLinearSpeed(unit : SpeedUnit) : double {
		MeasureUnitUtil::convert(this.linearVelocity.x, SpeedUnit::METERS_PER_SECOND, unit)
	}
	
	def getLinearVelocity1D5 : Vector1D<?, ?, ?> {
		this.linearVelocity
	}

	def getLinearAcceleration : double {
		this.linearAcceleration
	}
	
	def getLinearAcceleration(unit : SpeedUnit) : double {
		MeasureUnitUtil::convert(this.linearAcceleration, SpeedUnit::METERS_PER_SECOND, unit)
	}

	/** Invoked when the transformation given to {@link #transform(Transform1D5)}
	 * cannot be applied.
	 * <p>
	 * The default implementation of this function calls {@link #updateLinearSpeed(double, double)}
	 * with zero as parameters.
	 * 
	 * @param transform is the failing transformation.
	 * @param error is the cause of the error.
	 * @param timeManager the manager of time.
	 */
	protected def onInvalidTransformation(transform : Transform1D<RoadSegment>, error : Throwable, timeManager : TimeManager) {
		updateLinearSpeed(0, 0, timeManager)
	}

	/** Update the linear speed attribute according to the current simulation clock
	 * and the given movement.
	 * 
	 * @param dx is the curviline motion 
	 * @param dy is the lateral motion 
	 * @param timeManager the manager of time.
	 */
	protected def updateLinearSpeed(dx : double, dy : double, timeManager : TimeManager) {
		var previousSpeed = getLinearSpeed

		var dt = timeManager.dt
		val l = Math::hypot(dx, dy)
		var speed = PhysicsUtil::speed(l, dt)
		var acceleration = PhysicsUtil::acceleration(previousSpeed, speed, dt)

		this.linearVelocity.set(dx, dy)
		this.linearVelocity.length = speed
		this.linearAcceleration = acceleration
	}

	/** 
	 * Returns the direction of this entity on the road segment.
	 * @return the direction, or <code>null</code> if the direction
	 *     cannot be computed.
	 */
	final def getDirectionOnRoad : Direction1D {
		var con = getRoadEntry
		assert con !== null
		var sgmt = roadSegment
		assert sgmt !== null
		if (con == sgmt.beginPoint) {
			return Direction1D::SEGMENT_DIRECTION
		}
		if (con == sgmt.endPoint) {
			return Direction1D::REVERTED_DIRECTION
		}
		throw new IllegalStateException
	}

	/** 
	 * Applies the given transform to the given point.
	 * 
	 * @param position is the position to transform.
	 * @param transform is the transformation to apply.
	 * @param timeManager the time manager.
	 * @return the new entry point that is corresponding to the new position of the mobile entity; or <code>null</code>
	 * if the entry point should not be changed. 
	 * @throws IllegalArgumentException when the given transformation cannot be applied to this object: the entity is not on the first segment of the path...
	 */
	protected def transform(position : Point1d, transform : Transform1D<RoadSegment>,
		timeManager : TimeManager) : RoadConnection {
		var entryPoint = getRoadEntry
		assert entryPoint !== null

		// Test if the direction of the first segment of the path
		// corresponds to the current direction of the entity
		if (transform.firstSegmentPathDirection.isSegmentDirection) {
			if (this.directionOnRoad !== Direction1D::SEGMENT_DIRECTION) {
				throw new IllegalArgumentException("Invalid path: the entity has not the same direction as the first segment of the path")
			}
		} else {
			if (this.directionOnRoad !== Direction1D::REVERTED_DIRECTION) {
				throw new IllegalArgumentException("Invalid path: the entity has not the same direction as the first segment of the path")
			}
		}
		
		var updateEntryPoint = false

		var motion = new Vector1d
		var index = transform.transform(position, motion)
		
		var dx = motion.x
		var dy = motion.y

		if (index < 0) {
			throw new IllegalArgumentException("The entity is not located on the first segment of the path")
		}

		var path = transform.path
		if (path !== null && index > 0) {
			// We need to update the entry point of the entity, maybe a bit dirty
			// TODO Reimplement the Transform1D API to obtain the new connection quickly
			updateEntryPoint = true
			var it = path.iterator
			var i = 0
			while (it.hasNext && i < index) {
				entryPoint = it.next.getOtherSidePoint(entryPoint)
				if (entryPoint === null) {
					throw new IllegalArgumentException("Cannot obtain the new entry point from the path")
				}
				i++
			}
		}

		// Be sure that the segment on which the entity is located
		// is not a wrapping segment.
		var segment = position.segment as RoadSegment
		var wrappedSegment = segment.wrappedRoadSegment
		while (wrappedSegment !== segment) {
			segment = wrappedSegment
			wrappedSegment = segment.wrappedRoadSegment
		}
		position.segment = segment

		updateLinearSpeed(dx, dy, timeManager)

		if (updateEntryPoint) entryPoint else  null
	}

	/** Move the given object.
	 *
	 * @param transform the transformation to apply to the object
	 * @param timeManager the time manager.
	 */
	def transform(transform : Transform1D<RoadSegment>, timeManager : TimeManager) {
		var position = this.position.clone
		var entryPoint : RoadConnection 
		try {
			entryPoint = transform(position, transform, timeManager)
		} catch (e : IllegalArgumentException) {
			transform.onInvalidTransformation(e, timeManager)
			return
		}
		position.curvilineCoordinate = MathUtil::clamp(position.curvilineCoordinate, 0, position.segment.length)
		if (entryPoint !== null) {
			this.roadEntry = entryPoint
		}
		this.roadPosition = position
	}

}
