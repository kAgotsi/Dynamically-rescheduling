/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2019 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.framework1d.environment

import java.util.List
import org.arakhne.afc.math.geometry.IntersectionType
import org.arakhne.afc.math.geometry.d1.Segment1D
import org.arakhne.afc.simulation.framework.base.environment.CullingResult
import org.arakhne.afc.vmutil.json.JsonBuffer

/**
 * This class is the result of the frustum culler iterator.
 *
 * @param <D> the type of the entities.
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class CullingResult1d<D extends RoadObject> extends CullingResult<D> {

	val sameDirection : boolean
	val inFrontOf : boolean 
	val lateralDistance : double 
	val curvilineDistance : double 
	val path : List<? extends Segment1D<?, ?>>

	/** Constructor.
	 *
	 * @param type the type of intersection.
	 * @param object the culled object.
	 * @param relativeCurvilineDistance the distance to the object.
	 * @param relativeLateralDistance the lateral distance to the object.
	 * @param isInFrontOf indicates if the object is at the front of the perceiving agent.
	 * @param hasSameDirection indicates if the object has the same direction as the perceiving agent.
	 * @param path the path to reach the object.
	 */
	new (type : IntersectionType, object : D,
			relativeCurvilineDistance : double, relativeLateralDistance : double,
			isInFrontOf : boolean, hasSameDirection : boolean,
			path : List<? extends Segment1D<?, ?>>) {
		super(type, object)
		this.curvilineDistance = relativeCurvilineDistance
		this.inFrontOf = isInFrontOf
		this.lateralDistance = relativeLateralDistance
		this.sameDirection = hasSameDirection
		this.path = path
	}

	def toJson(buffer : JsonBuffer) {
		super.toJson(buffer)
		buffer.add("curvilineDistance", getPerceivedObjectCurvilineDistance)
		buffer.add("lateralDistance", getPerceivedObjectLateralDistance)
		buffer.add("inFront", isInFront)
		buffer.add("sameDirection", isSameDirection)
		buffer.add("pathToPerceivedObject", getPathToPerceivedObject)
	}

	/** 
	 * Replies the path to the perceived object.
	 * 
	 * @return the path to the perceived object.
	 */
	def getPathToPerceivedObject : List<? extends Segment1D<?, ?>> {
		this.path
	}

	/** 
	 * Replies the relative curviline distance to the perceived object.
	 * 
	 * @return the relative curviline distance to the perceived object.
	 */
	def getPerceivedObjectCurvilineDistance : double {
		this.curvilineDistance
	}

	/** 
	 * Replies the relative shift distance to the perceived object.
	 * 
	 * @return the relative shift distance to the perceived object.
	 */
	def getPerceivedObjectLateralDistance : double {
		this.lateralDistance
	}

	/** 
	 * Replies if the perceived object is in front of the perceiver.
	 * 
	 * @return {@code true} if the perceived object is in front of,
	 * otherwise {@code false}
	 */
	def isInFront : boolean {
		this.inFrontOf
	}

	/** 
	 * Replies if the perceived object has the same direction as 
	 * the perceiver.
	 * 
	 * @return {@code true} if same direction, otherwise {@code false}.
	 */
	def isSameDirection : boolean {
		this.sameDirection
	}

}

