/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2019 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.arakhne.afc.simulation.framework.base.config

import java.io.File
import java.util.Date
import java.util.List
import java.util.UUID
import org.arakhne.afc.vmutil.json.JsonBuffer
import java.util.Collection

/**
 * Abstract implementation of a configuration.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
abstract class AbstractConfiguration extends AbstractIdentificableConfig {

	val date = new Date

	var name : String

	var time : TimeConfig

	val spawners = <SpawnerConfig>newArrayList

	var probes = <UUID, ProbeConfig>newHashMap

	var charts = <ChartConfig>newArrayList

	var probeFolder : File

	def getDate : Date {
		this.date
	}
	
	def getScenarioName : String {
		this.name
	}

	def setScenarioName(name : String) {
		this.name = name
	}

	def getTimeConfig : TimeConfig {
		if (this.time === null) {
			this.time = new TimeConfig
		}
		return this.time
	}
 
	def setTimeConfig(config : TimeConfig) {
		this.time = config
	}

	def getSpawners : List<SpawnerConfig> {
		this.spawners
	}

	def getProbes : Collection<ProbeConfig> {
		this.probes.values.unmodifiableView
	}

	def getProbe(id : UUID) : ProbeConfig {
		this.probes.get(id)
	}

	def addProbe(probe : ProbeConfig) : void {
		this.probes.put(probe.ID, probe)
	}

	def getProbeFolder : File {
		if (this.probeFolder === null) {
			this.probeFolder = new File("probes")
		}
		return this.probeFolder
	}

	def setProbeFolder(folder : File) {
		this.probeFolder = folder
	}

	def getCharts : List<ChartConfig> {
		this.charts
	}

	def toJson(buffer : JsonBuffer) : void {
		super.toJson(buffer)
		buffer.add("scenarioName", scenarioName)
		buffer.add("time", timeConfig)
		buffer.add("spawners", getSpawners)
		buffer.add("probes", getProbes)
		buffer.add("probeFolder", getProbeFolder)
		buffer.add("charts", getCharts)
	}

}
