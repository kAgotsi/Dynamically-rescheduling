/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2019 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.framework1d.agents.speed

import java.util.List
import org.arakhne.afc.gis.road.path.RoadPath
import org.arakhne.afc.gis.road.primitive.RoadSegment
import org.arakhne.afc.math.MathUtil
import org.arakhne.afc.math.geometry.d1.Direction1D
import org.arakhne.afc.math.geometry.d1.d.Point1d
import org.arakhne.afc.math.geometry.d1.d.Rectangle1d
import org.arakhne.afc.math.geometry.d2.Vector2D
import org.arakhne.afc.simulation.framework.framework1d.environment.CullingResult1d
import org.arakhne.afc.simulation.framework.framework1d.environment.MobileRoadObject
import org.arakhne.afc.simulation.framework.framework1d.environment.RoadObject
import org.arakhne.afc.simulation.framework.framework1d.preferences.PreferenceManager1d

/** 
 * Capacity for an agent to choose a speed according to the Intelligent Driver Model.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
skill IdmSpeedSelection implements SpeedSelection {

	protected def getMaxSpeedForNextTurn(path : RoadPath, currentPosition : Point1d, currentSpeed : double,
		currentDirection : Direction1D, maxSpeed : double) : double {
		if (path === null || path.size < 2) {
			return maxSpeed
		}

		var firstSegment = path.get(0)
		var secondSegment = path.get(1)

		var radius : double

		if (firstSegment == secondSegment) {
			radius = 180.0
		} else {
			var connection = firstSegment.getSharedConnectionWith(secondSegment)

			var p0 = firstSegment.getOtherSidePoint(connection).point
			var p1 = connection.point
			var p2 = secondSegment.getOtherSidePoint(connection).point

			radius = Math::abs(Vector2D::signedAngle(p0.x - p1.x, p0.y - p1.y, p2.x - p1.x, p2.y - p1.y))
		}

		// http://fr.wikipedia.org/wiki/Signalisation_verticale_des_virages_en_France#Vitesse_dans_le_virage
		var result = Math::min(102.0 / (1.0 + 346.0 / (radius * 180.0 / Math::PI) ** 1.5), maxSpeed)

		return result
	}

	/** 
	 * Returns if the given perception's object is in front and in the same row
	 * as us, meaning that we will have to break/avoid it
	 * 
	 * @param p the perception
	 * @param vehicleBounds
	 * @return <code>true</code> if the perception's object is in our way
	 */
	private def isInWay(p : CullingResult1d<RoadObject>, vehicleBounds : Rectangle1d) : boolean {
		p.isInFront && vehicleBounds.lateralIntersects(p.culledObject.bounds)
	}

	/** 
	 * Computes if given bounds intersect laterally with our bounds
	 * 
	 * @param vehicleBounds
	 * @param b other bounds
	 * @return <code>true</code> if the bounds intersect laterally
	 */
	private def lateralIntersects(vehicleBounds : Rectangle1d, b : Rectangle1d) : boolean {
		vehicleBounds.maxY > b.minY && vehicleBounds.minY < b.maxY
	}

	/** 
	 * Gets the angle between two connected segments
	 * 
	 * @param firstSegment the first segment
	 * @param secondSegment the second segment
	 * @return the signed angle between the two, in degrees
	 */
	private def getAngle(firstSegment : RoadSegment, secondSegment : RoadSegment) : double {
		var connection = firstSegment.getSharedConnectionWith(secondSegment)
		var connecPt = connection.point
		var firstPt = firstSegment.getOtherSidePoint(connection).point
		var lastPt = secondSegment.getOtherSidePoint(connection).point
		return Vector2D.signedAngle(connecPt.x - firstPt.x, connecPt.y - firstPt.y, lastPt.x - connecPt.x,
			lastPt.y - connecPt.y)
	}

	/** 
	 * Computes if the given perception contains a vehicle for which we must
	 * yield the right of way
	 * 
	 * @param p the perception
	 * @param path is the path followed by the agent.
	 * @return <code>true</code> if we must yield the right of way to the
	 * vehicle of the perception
	 */
	private def mustYieldPriority(p : CullingResult1d<RoadObject>, path : RoadPath) : boolean {
		if (p.isInFront && !p.isSameDirection) {
			var pathToVehicle = RoadPath::of(p.pathToPerceivedObject as List<RoadSegment>)
			var otherVehicleCrossroad = pathToVehicle.firstJunctionPoint
			var thisCrossroad = path.firstJunctionPoint

			if (this.getAngle(thisCrossroad.enteringSegment, thisCrossroad.exitingSegment) >
				getAngle(otherVehicleCrossroad.enteringSegment, otherVehicleCrossroad.exitingSegment)) {
				return true
			}
		}
		return false
	}

	/** 
	 * Utility method so we don't have to pass all constant parameters for the
	 * vehicle to IntelligentDriverModel each time
	 * 
	 * @param maxAcceleration
	 * @param maxDeceleration
	 * @param currentSpeed
	 * @param desiredSpeed
	 * @param obstacleSpeed
	 * @paam minimalDistance
	 * @param obstacleDistanceble
	 * @param reactionTime
	 * @return the acceleration the vehicle should have with these parameters
	 */
	private def computeIdmAcceleration(maxAcceleration : double, maxDeceleration : double, currentSpeed : double,
		desiredSpeed : double, obstacleSpeed : double, minimalDistance : double, obstacleDistance : double,
		reactionTime : double) : double {
		if (desiredSpeed === 0.0) {
			return 0.0
		}

		var acceleration : double

		if (obstacleDistance >= PreferenceManager1d::singleton.idmFreeDrivingDistance) {
			// Free Driver Model
			acceleration = maxAcceleration * (1.0 - (currentSpeed / desiredSpeed) ** 4.0)
		} else {
			// Intelligent Driver Model
			var s = (minimalDistance + currentSpeed * (reactionTime + (currentSpeed - obstacleSpeed))) /
				(2 * obstacleDistance * Math::sqrt(maxAcceleration * maxDeceleration))

			acceleration = -maxAcceleration * (s / obstacleDistance) ** 2
		}

		return MathUtil::clamp(acceleration, -maxDeceleration, maxAcceleration)
	}

	override computeAcceleration(path : RoadPath, perceptions : List<CullingResult1d<RoadObject>>,
		currentPosition : Point1d, currentDirection : Direction1D, currentSpeed : double, maxSpeed : double,
		maxAcceleration : double, maxDeceleration : double, vehicleBounds : Rectangle1d,
		minimalDistance : double, reactionTime : double,
		destinationPosition : Point1d = null) : double {
		var rs = currentPosition.segment as RoadSegment

		var maxspeed = maxSpeed
		if (rs.hasAttribute("segmentSpeed")) {
			var attrmaxspeed = rs.getAttribute("segmentSpeed", Double::POSITIVE_INFINITY)
			maxspeed = Math::min(maxspeed, attrmaxspeed)
		}

		var desiredSpeed = Math::min(maxspeed,
			getMaxSpeedForNextTurn(path, currentPosition, currentSpeed, currentDirection, maxSpeed))

		// initialize with destination distance
		var obstacleDistance = if (currentPosition !== null) destinationPosition.getDistance(currentPosition) else Double::POSITIVE_INFINITY
		var obstacleSpeed = 0.0

		// FIXME : check if perceptions are ordered
		var iter = perceptions.iterator
		while (iter.hasNext()) {
			var obstacle = iter.next
			if (obstacle.perceivedObjectCurvilineDistance < obstacleDistance && obstacle.isInWay(vehicleBounds)) {
				obstacleDistance = obstacle.getPerceivedObjectCurvilineDistance();

				if (obstacle.mustYieldPriority(path)) {
					obstacleSpeed = 0.0
				} else {
					obstacleSpeed = (obstacle.culledObject as MobileRoadObject).linearSpeed
				}
			}
		}

		return computeIdmAcceleration(maxAcceleration, maxDeceleration, currentSpeed,
				desiredSpeed, obstacleSpeed, minimalDistance, obstacleDistance, reactionTime)
	}

}
