/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2019 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.framework1d.agents.path

import org.arakhne.afc.math.geometry.d1.Direction1D
import org.arakhne.afc.math.geometry.d1.d.Point1d
import org.arakhne.afc.gis.road.path.RoadPath
import org.arakhne.afc.gis.road.primitive.RoadSegment
import org.arakhne.afc.gis.road.primitive.RoadSegmentContainer
import org.arakhne.afc.gis.road.primitive.RoadConnection

/**
 * Abstract implementation of a skill for an agent to choose a path.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
abstract skill AbstractPathSelection implements PathSelection {

	override final updatePath(path : RoadPath, roads : RoadSegmentContainer, currentPosition : Point1d,
			viewDirection : Direction1D) : boolean {
		var removeFirst = false
		var currentSegment = currentPosition.segment as RoadSegment
		var entryPoint = if (viewDirection.isSegmentDirection) currentSegment.beginPoint else currentSegment.endPoint

		if (path.empty) {
			// Ensure the current segment is the first segment on the path.
			path.add(currentSegment.wrappedRoadSegment, entryPoint.wrappedRoadConnection)
		} else {
			// Remove the first segment on the path if it is leaved away.
			var sgmt = path.firstSegment
			var pt = path.firstPoint
			if (sgmt != currentSegment || pt != entryPoint) {
				path.removeBefore(currentSegment.wrappedRoadSegment, entryPoint.wrappedRoadConnection)
				removeFirst = true
			}
		}

		// Update the last segment on the path, if necessary
		var lastSegment = path.lastSegment
		var finalPoint = path.lastPoint
		var perceivedSegment = roads.getRoadSegment(lastSegment.geoId)
		while (perceivedSegment !== null) {
			var perceivedConnection : RoadConnection
			if (lastSegment.beginPoint == finalPoint) {
				perceivedConnection = perceivedSegment.beginPoint
			} else {
				perceivedConnection = perceivedSegment.endPoint
			}
			if (!perceivedConnection.isFinalConnectionPoint) {
				var selectedSegment = selectSegment(perceivedSegment, perceivedConnection)
				if (selectedSegment !== null) {
					path.add(selectedSegment.wrappedRoadSegment)
					perceivedSegment = selectedSegment
					lastSegment = path.lastSegment
					finalPoint = path.lastPoint
				} else {
					perceivedSegment = null
				}
			} else {
				perceivedSegment = null
			}
		}

		// Treat the cul-de-sac ways
		if (path.size == 1 && path.isCulDeSacWay && isTurnBackAtCulDeSac) {
			path.add(currentSegment.wrappedRoadSegment)
		}		
		return removeFirst
	}

	/** Replies if this solver allow to turn back when reached a cul-de-sac.
	 * 
	 * @return {@code true} if this solver is allowed to turn bak when reached a
	 * cul-de-sac way, otherwise {@code false}.
	 */
	protected abstract def isTurnBackAtCulDeSac : boolean 

	/** Select a segment to follow.
	 *
	 * @param lastSegment is the last reached segment in the path.
	 * @param connection is the connection from which a road segment may be selected. 
	 * @return the selected segment or {@code null}.
	 */
	protected abstract def selectSegment(lastSegment : RoadSegment, connection : RoadConnection) : RoadSegment

}
