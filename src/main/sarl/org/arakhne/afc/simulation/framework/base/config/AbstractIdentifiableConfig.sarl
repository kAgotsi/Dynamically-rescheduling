/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2019 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.arakhne.afc.simulation.framework.base.config

import java.util.UUID
import org.arakhne.afc.vmutil.json.JsonBuffer
import org.arakhne.afc.vmutil.json.JsonableObject

/**
 * Configuration.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
abstract class AbstractIdentificableConfig implements JsonableObject {

	var id : UUID

	def getID : UUID {
		if (this.id === null) {
			this.id = UUID.randomUUID
		}
		this.id
	}

	def setID(id : UUID) {
		this.id = id
	}

	def toJson(buffer : JsonBuffer) : void {
		buffer.add("id", getID)
	}

	override toString : String {
		var buffer = new JsonBuffer
		toJson(buffer)
		return buffer.toString as String
	}

}
