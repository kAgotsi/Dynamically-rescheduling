/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2019 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.base.fx

import java.io.PrintWriter
import java.io.StringWriter
import java.util.ResourceBundle
import javafx.application.Platform
import javafx.scene.control.Alert
import javafx.scene.control.Alert.AlertType
import javafx.scene.control.DialogPane
import javafx.scene.control.Label
import javafx.scene.control.TextArea
import javafx.scene.layout.GridPane
import javafx.scene.layout.Priority
import javafx.stage.Stage

/** JavaFX dialogs.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
final class Dialogs {

	private new {}

	static def alert(exception : Throwable, bundle : ResourceBundle, showOnConsole : boolean = true) : void {
		var r : Runnable = [
			try {
				var alert = new Alert(AlertType::ERROR)
				alert.title = bundle.getString("EXCEPTION_DIALOG")
				var message = exception.localizedMessage
				if (message.nullOrEmpty) {
					message = exception.class.name
				}
				alert.headerText = message
				alert.contentText = message
	
				// Create expandable Exception.
				var sw = new StringWriter
				var pw = new PrintWriter(sw)
				exception.printStackTrace(pw)
				var exceptionText = sw.toString as String
				sw.close
	
				var label = new Label(bundle.getString("EXCEPTION_STACKTRACE"))
				var textArea = new TextArea(exceptionText)
				textArea.editable = false
				textArea.wrapText = true
				textArea.maxWidth = Double::MAX_VALUE
				textArea.maxHeight = Double::MAX_VALUE
				GridPane::setVgrow(textArea, Priority::ALWAYS)
				GridPane::setHgrow(textArea, Priority::ALWAYS)
				var expContent = new GridPane
				expContent.maxWidth = Double::MAX_VALUE
				expContent.add(label, 0, 0)
				expContent.add(textArea, 0, 1)

				val dialogPane = alert.dialogPane
				dialogPane.expandableContent = expContent
				dialogPane.expandedProperty.addListener[Platform::runLater[dialogPane.resizeAlert]]
	
				alert.showAndWait
				
				if (showOnConsole) {
					exception.printStackTrace
				}
			} catch (ex : Throwable) {
				ex.printStackTrace
			}
		]
		if (Platform::isFxApplicationThread) {
			r.run
		} else {
			Platform::runLater(r)
		}
	}

	private static def resizeAlert(pane : DialogPane) {
        pane.requestLayout
        var stage = pane.scene.window as Stage
        stage.sizeToScene
        stage.centerOnScreen
	}

}
