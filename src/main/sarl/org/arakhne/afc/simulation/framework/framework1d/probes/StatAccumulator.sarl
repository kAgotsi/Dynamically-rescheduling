/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2019 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.framework1d.probes

import static extension java.lang.Math.*

/**
 * Accumulator with min, max, and standard deviation.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class StatAccumulator extends Accumulator {

	var min = Double::POSITIVE_INFINITY

	var max = Double::NEGATIVE_INFINITY

	var acc = 0.0

	override increment(value : double) {
		super.increment(value)
		if (value < this.min) {
			this.min = value
		}
		if (value > this.max) {
			this.max = value
		}
		this.acc += value * value
	}

	def getAverage : double {
		getValue / getCount
	}

	def getMin : double {
		this.min
	}

	def getMax : double {
		this.max
	}

	def getVariance : double {
		var avg = getAverage
		var n = getCount
		var sum = this.acc - n * avg * avg
		return sum / n		
	}

	def getStdDev : double {
		getVariance.sqrt
	}

}
