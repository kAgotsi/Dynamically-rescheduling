/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2019 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.base.probes

import java.util.Iterator
import org.arakhne.afc.simulation.framework.base.time.TimeManager

import static org.arakhne.afc.simulation.framework.base.probes.ProbeManager.Singleton.*
import java.io.File
import org.arakhne.afc.simulation.framework.base.environment.AbstractEnvironmentModel

/**
 * Manager of probes for a simulator.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
interface ProbeManager {

	static class Singleton {

		package static var singleton : ProbeManager

	}
	
	/** Replies the root folder in whih data is written. */
	def getRootFolder : File

	/** Replies the singleton. */
	static def getSingleton : ProbeManager {
		Singleton::singleton
	}

	/** Change the singleton.
	 */
	static def setSingleton(manager : ProbeManager) {
		Singleton::singleton = manager
	}

	/** Run all the probes.
	 *
	 * @param environment the environment model.
	 * @param time is the time manager.
	 */
	 def run(environment : AbstractEnvironmentModel<?>, time : TimeManager)

	/** Remove all probes
	 */
	def removeAll

	/** Replies an iterable on the agents' probes.
	 */
	@Pure
	def agentProbes : Iterable<Probe> {
		[agentProbeIterator]
	}

	/** Replies an iterator on the agents' probes.
	 */
	@Pure
	def agentProbeIterator : Iterator<Probe>

	/** Replies an iterable on the environment probes.
	 */
	@Pure
	def environmentProbes : Iterable<EnvironmentProbe<?>> {
		[environmentProbeIterator]
	}

	/** Replies an iterator on the environment probes.
	 */
	@Pure
	def environmentProbeIterator : Iterator<EnvironmentProbe<?>>

	/** Replies an iterable on the probes of the given type.
	 */
	@Pure
	def probes(type : Class<T>) : Iterable<T> with T extends Probe {
		[type.probeIterator]
	}

	/** Replies an iterator on the probes of the given type.
	 */
	@Pure
	def probeIterator(type : Class<T>) : Iterator<T> with T extends Probe

	/** Replies an iterable on the probes.
	 */
	@Pure
	def probes : Iterable<Probe> {
		[probeIterator]
	}

	/** Replies an iterator on the probes.
	 */
	@Pure
	def probeIterator : Iterator<Probe>

	/** Add a probe into this manager.
	 */
	def addProbe(probe : Probe)

	/** Remove a probe from this manager. */
	def removeProbe(probe : Probe) : boolean

	/** Replies if this manager is empty (no probe) */
	@Pure
	def isEmpty : boolean
}
