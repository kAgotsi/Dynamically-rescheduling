/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2019 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.framework1d.scenario

import io.sarl.lang.core.Agent
import java.util.Collection
import java.util.List
import java.util.Map
import java.util.UUID
import javafx.scene.chart.XYChart
import org.arakhne.afc.gis.primitive.GISContainer
import org.arakhne.afc.simulation.framework.base.probes.ProbeManager
import org.arakhne.afc.simulation.framework.base.scenario.SimulationScenario
import org.arakhne.afc.simulation.framework.framework1d.config.AbstractConfiguration1d
import org.arakhne.afc.simulation.framework.framework1d.environment.EnvironmentModel1d
import org.arakhne.afc.simulation.framework.framework1d.environment.Spawner1d

/** 
 * Describes a simulation scenario.
 * 
 * @param <T> the type of the configuration to read.
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class SimulationScenario1d<T extends AbstractConfiguration1d> extends SimulationScenario<T, EnvironmentModel1d, Spawner1d> {

	val mapContainer : GISContainer<?>

	new (mapContainer : GISContainer<?>, agentEnvironment : EnvironmentModel1d, configuration : T,
		objectAgents : Collection<Map<UUID, Class<? extends Agent>>>, spawners : List<Spawner1d>,
		probeManager : ProbeManager, charts : Map<UUID, XYChart<Double, Double>>) {
		super(agentEnvironment, configuration, objectAgents, spawners, probeManager, charts)
		assert mapContainer !== null
		this.mapContainer = mapContainer
	}

	def getMapContainer : GISContainer<?> {
		this.mapContainer
	}

}
