/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2019 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.framework1d.fx.probes

import com.opencsv.CSVWriter
import java.io.File
import javafx.scene.chart.XYChart.Data
import javafx.scene.chart.XYChart.Series
import org.arakhne.afc.gis.location.GeoId
import org.arakhne.afc.simulation.framework.base.time.TimeManager
import org.arakhne.afc.simulation.framework.framework1d.environment.EnvironmentModel1d
import org.arakhne.afc.simulation.framework.framework1d.probes.StatAccumulator

/**
 * A probe for measuring the average
 * {@link https://en.wikipedia.org/wiki/Traffic_flow#Speed speed of cars} on a road.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class GlobalRoadSpeedProbe extends AbstractCsvFxEnvironmentProbe1d<EnvironmentModel1d> {

	override probe(environment : EnvironmentModel1d, time : TimeManager, rootFolder : File, output : CSVWriter) {
		var data = <GeoId, Pair<StatAccumulator, StatAccumulator>>newTreeMap(null)
		var globalAcc = new StatAccumulator
		for (body : environment.agentBodies) {
			var road = body.roadSegment
			var key = road.geoId
			var pair = data.get(key)
			if (pair === null) {
				var speedAcc = new StatAccumulator
				var accelAcc = new StatAccumulator
				pair = Pair::of(speedAcc, accelAcc)
				data.put(key, pair)
			}
			var speed = body.linearSpeed
			var acceleration = body.linearAcceleration
			pair.key.increment(speed)
			pair.value.increment(acceleration)
			globalAcc.increment(speed)
		}
		
		var t = time.current

		for (entry : data.entrySet) {
			var pr = entry.value
			var nbBodies = pr.value.count
			var speedAcc = pr.key
			var accelAcc = pr.value
			if (nbBodies > 0) {
				output.writeNext(#[
					String.valueOf(t) as String,
					entry.key.toString as String,
					String.valueOf(nbBodies) as String,
					String.valueOf(speedAcc.average) as String,
					String.valueOf(speedAcc.stdDev) as String,
					String.valueOf(speedAcc.min) as String,
					String.valueOf(speedAcc.max) as String,
					String.valueOf(accelAcc.average) as String,
					String.valueOf(accelAcc.stdDev) as String,
					String.valueOf(accelAcc.min) as String,
					String.valueOf(accelAcc.max) as String
				])
				output.flushQuietly
			}
		}

		var series = chartSeries
		if (series !== null) {
			var gdata = new Data
			gdata.XValue = time.current
			gdata.YValue = globalAcc.average
			series.data += gdata
		}
	}
	
	def getCsvHeader : String[] {
		#[
			"t",
			"Segment Id",
			"Nb bodies (#)",
			"Avg speed (m/s)",
			"Std dev speed (m/s)",
			"Min speed (m/s)",
			"Max speed (m/s)",
			"Avg acceleration (m/s**2)",
			"Std dev acceleration (m/s**2)",
			"Min acceleration (m/s**2)",
			"Max acceleration (m/s**2)"
		]
	}

	override getChartSeries : Series<Double, Double> {
		return ensureSeries
	}

}
