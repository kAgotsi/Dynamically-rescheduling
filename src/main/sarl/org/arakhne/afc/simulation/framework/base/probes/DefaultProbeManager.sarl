/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2019 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.base.probes

import java.io.File
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Iterator
import org.arakhne.afc.simulation.framework.base.environment.AbstractEnvironmentModel
import org.arakhne.afc.simulation.framework.base.time.TimeManager
import org.arakhne.afc.vmutil.FileSystem
import com.google.common.collect.Iterators

/**
 * Manager of probes for a simulator.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class DefaultProbeManager implements ProbeManager {

	val agentProbes = <Probe>newArrayList

	val environmentProbes = <EnvironmentProbe<?>>newArrayList

	val rootFolder : File
	
	new (rootFolder : File, startTime : Date) {
		var fmt = new SimpleDateFormat("Y-M-d_h-m-s_")
		var tmpFolder = FileSystem::createTempDirectory(fmt.format(startTime), "", rootFolder)
		this.rootFolder = tmpFolder 
		singleton = this
	}

	override getRootFolder : File {
		this.rootFolder
	}

	override run(environment : AbstractEnvironmentModel<?>, time : TimeManager) {
		val rf = getRootFolder
		this.environmentProbes.parallelStream.forEach[
			it.runGeneric(environment, time, rf)
		]
		this.agentProbes.parallelStream.forEach[
			it.run(time, rf)
		]
	}
	
	def agentProbeIterator : Iterator<Probe> {
		this.agentProbes.unmodifiableView.iterator
	}
	
	def environmentProbeIterator : Iterator<EnvironmentProbe<?>> {
		this.environmentProbes.unmodifiableView.iterator
	}

	def probeIterator(type : Class<T>) : Iterator<T> with T extends Probe {
		return Iterators::filter(probeIterator, type)
	}

	def probeIterator : Iterator<Probe> {
		Iterators::concat(this.environmentProbes.iterator, this.agentProbes.iterator)
	}

	def addProbe(probe : Probe) {
		if (probe instanceof EnvironmentProbe) {
			this.environmentProbes += probe
		} else {
			this.agentProbes += probe
		}
		probe.probeManager = this
	}
	
	def removeProbe(probe : Probe) : boolean {
		if (!this.environmentProbes.remove(probe)) {
			if (!this.agentProbes.remove(probe)) {
				return false
			}
		}
		probe.probeManager = null
		probe.close
		return true
	}

	def removeAll {
		var iter = this.environmentProbes.iterator
		while (iter.hasNext) {
			val probe = iter.next
			iter.remove
			probe.probeManager = null
			probe.close
		}
		var iter2 = this.agentProbes.iterator
		while (iter2.hasNext) {
			val probe = iter2.next
			iter.remove
			probe.probeManager = null
			probe.close
		}
	}

	def isEmpty : boolean {
		this.environmentProbes.isEmpty && this.agentProbes.isEmpty
	}
	
}
