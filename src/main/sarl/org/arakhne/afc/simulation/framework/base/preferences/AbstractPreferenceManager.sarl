/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2019 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.base.preferences

import com.google.gson.Gson
import java.io.File
import java.util.prefs.Preferences

import static extension org.arakhne.afc.vmutil.FileSystem.*

/**
 * Abstract implements of a manager of preferences for a simulator.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
abstract class AbstractPreferenceManager implements PreferenceManager {

	protected val gson = new Gson

	/** Replies the singleton.
	 */
	static def getSingleton : AbstractPreferenceManager {
		PreferenceManager::singleton as AbstractPreferenceManager
	}

	/** Constructor.
	 *
	 * @param bundle : the localization bundle.
	 */
	new {
		if (singleton === null) {
			singleton = this
		}
	}

	/** Replies the backstore for the preferences.
	 */
	protected abstract def getStore : Preferences

	final override sync(force : boolean) {
		if (force) {
			saveProperties
		}
		this.store.sync
	}

	protected abstract def saveProperties

	protected def prefFile(name : String, defaultValue : File = null, enableJson : boolean = true) : File {
		var str : String
		if (enableJson) {
			str = this.store.get(name, null)
			if (!str.nullOrEmpty) {
				var rawObject = this.gson.fromJson(str, typeof(File))
				if (rawObject === null) {
					str = null
				} else {
					str = rawObject.path
				}
			}
		} else {
			str = this.store.get(name, null)
		}
		if (!str.nullOrEmpty) {
			return str.convertStringToFile ?: defaultValue
		}
		return defaultValue
	}

	protected def prefDouble(name : String, defaultValue : double = 0.0) : double {
		this.store.getDouble(name, defaultValue)
	}

	protected def prefInt(name : String, defaultValue : int = 0) : int {
		this.store.getInt(name, defaultValue)
	}

	protected def prefBoolean(name : String, defaultValue : boolean = false) : boolean {
		this.store.getBoolean(name, defaultValue)
	}

}
