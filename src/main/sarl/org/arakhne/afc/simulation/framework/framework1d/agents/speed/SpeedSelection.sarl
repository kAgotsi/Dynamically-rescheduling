/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2019 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.arakhne.afc.simulation.framework.framework1d.agents.speed

import java.util.List
import org.arakhne.afc.math.geometry.d1.Direction1D
import org.arakhne.afc.math.geometry.d1.d.Point1d
import org.arakhne.afc.simulation.framework.framework1d.environment.CullingResult1d
import org.arakhne.afc.simulation.framework.framework1d.environment.RoadObject
import org.arakhne.afc.gis.road.path.RoadPath
import org.arakhne.afc.math.geometry.d1.d.Rectangle1d

/**
 * Capacity for an agent to choose a speed.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
capacity SpeedSelection {

	/** 
	 * Compute the instant acceleration.
	 * 
	 * @param path is the path followed by the agent.
	 * @param perceptions is the list of the perceived objects around the car.
	 * @param currentPosition is the current car position.
	 * @param currentDirection is the current car direction.
	 * @param currentSpeed is the current car speed.
	 * @param maxSpeed is the maximum car speed.
	 * @param maxAcceleration is the maximum acceleration of the car.
	 * @param maxDeceleration is the maximum deceleration of the car.
	 * @param destinationPosition is the position of the destination point.
	 * @return the acceleration.
	 */
    def computeAcceleration(
    		path : RoadPath, 
    		perceptions : List<CullingResult1d<RoadObject>>,
    		currentPosition : Point1d,
			currentDirection : Direction1D,
            currentSpeed : double,
            maxSpeed : double,
            maxAcceleration : double,
            maxDeceleration : double,
            vehicleBounds : Rectangle1d,
            minimalDistance : double,
            reactionTime : double,
			destinationPosition : Point1d = null) : double

}
