/** 
 * 
 */
package fr.utbm.info.ia51.ar.agents

import fr.utbm.info.ia51.ar.behaviors.Initiator
import fr.utbm.info.ia51.ar.behaviors.participant
import fr.utbm.info.ia51.ar.capacities.NativeCapacity
import fr.utbm.info.ia51.ar.events.ConfirmInitiator
import fr.utbm.info.ia51.ar.events.EndRenegotiation
import fr.utbm.info.ia51.ar.events.askToBeInitiator
import fr.utbm.info.ia51.ar.events.perturbation
import fr.utbm.info.ia51.ar.events.PerturbationImpactingMe
import fr.utbm.info.ia51.ar.skills.NativeSkill
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.lang.core.Behavior
import fr.utbm.info.ia51.ar.requirements.PersonnalInfo
import io.sarl.core.Logging

/** 
 * <p> This class define the mind and the body for agent.
 * In this project we considering agent as all the participant
 * to a trip or activity.
 * </p>
 * 
 * @author komi AGOTSI
 * @author Lilian Durand
 * @author Koffi Agbenya                                                                             
 * 
 * 
 */
agent Person {
	uses Behaviors, DefaultContextInteractions, NativeCapacity, Logging

	// var inRelationsWith : List<Person>
	var actualBehavior : Behavior
	var perturb : perturbation
	var data : PersonnalInfo

	// EVENT SECTION
	on Initialize {
		this.data = occurrence.parameters.get(0) as PersonnalInfo
		setLoggingName(this.data.name)

		info("Hello I am " + this.data.name)

		// this.participantsRenegotiation = null
		this.actualBehavior = null
		setSkill(new NativeSkill)
	}

	// Reception d'une perturbation par l'agent seulement si
	on perturbation [this.actualBehavior == null] {
		info("perturbation received")

		// L'agent determine si la perturbation l'impacte ou non
		if (isPerturbationImpacting(occurrence)) {
			info("I am a participant")
			// L'agent previent l'environnement qu'il est impacté par la pertubation
			emit(new PerturbationImpactingMe())

			// L'Agent agit comme un participant à la pertubation
			// unregisterBehavior(this.actualBehavior)
			this.actualBehavior = registerBehavior(new participant(this))

			this.perturb = occurrence

			// L'agent "choisit" s'il veut etre initiateur on non
			if (wantsToBeInitiator) {
				info("I want to be initiator")
				// L'agent demande a etre initiateur
				emit(new askToBeInitiator())
			}
		}
	}

	on perturbation [this.actualBehavior !== null] {
		// TODO l'agent informe l'environnement qu'il est deja en cours de negotiation
	}

	// L'agent est "nommé" initiateur par l'environnement
	on ConfirmInitiator {
		info("I am the initiator")
		unregisterBehavior(this.actualBehavior)
		this.actualBehavior = registerBehavior(new Initiator(this), occurrence.participants, this.perturb)
		// The initiator have to know the participants
	}

	// L'agent n'est plus participant (ou initiateur) à la fin de la renegotiation
	on EndRenegotiation {
		if (this.actualBehavior !== null) {
			info("Quitting renegotiation")
			unregisterBehavior(this.actualBehavior)
			this.actualBehavior = null
		}
	}

}
