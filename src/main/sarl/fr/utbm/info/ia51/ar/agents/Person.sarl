/** 
 * 
 */
package fr.utbm.info.ia51.ar.agents

import fr.utbm.info.ia51.ar.behaviors.Initiator
import fr.utbm.info.ia51.ar.behaviors.participant
import fr.utbm.info.ia51.ar.capacities.NativeCapacity
import fr.utbm.info.ia51.ar.events.ConfirmInitiator
import fr.utbm.info.ia51.ar.events.EndRenegotiation
import fr.utbm.info.ia51.ar.events.askToBeInitiator
import fr.utbm.info.ia51.ar.events.perturbation
import fr.utbm.info.ia51.ar.events.PerturbationImpactingMe
import fr.utbm.info.ia51.ar.skills.NativeSkill
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.lang.core.Behavior
import java.util.List
import javax.xml.bind.annotation.XmlAccessType
import javax.xml.bind.annotation.XmlAccessorType
import javax.xml.bind.annotation.XmlElement
import javax.xml.bind.annotation.XmlRootElement

/** 
 * <p> This class define the mind and the body for agent.
 * In this project we considering agent as all the participant
 * to a trip or activity.
 * </p>
 * 
 * @author komi AGOTSI
 * @author Lilian Durand
 * @author Koffi Agbenya                                                                             
 * 
 * 
 */
@XmlRootElement(name = "Person")
@XmlAccessorType(XmlAccessType.PROPERTY)
agent Person {
	uses Behaviors, DefaultContextInteractions, NativeCapacity
	
	var myRelations : List<Person>
	//var inRelationsWith : List<Person>
	var actualBehavior : Behavior

	// EVENT SECTION
	on Initialize {
		this.participantsRenegotiation = null
		this.actualBehavior = null
		setSkill(new NativeSkill)
	}
	

	// Reception d'une perturbation par l'agent seulement si 
	on perturbation [this.actualBehavior === null] {

		
		// L'agent determine si la perturbation l'impacte ou non
		if (isPerturbationImpacting(occurrence)) {
			// L'agent previent l'environnement qu'il est impacté par la pertubation
			emit(new PerturbationImpactingMe())
			
			// L'Agent agit comme un participant à la pertubation
			unregisterBehavior(this.actualBehavior)
			this.actualBehavior = new participant(this)
			registerBehavior(actualBehavior)
			
			// L'agent "choisit" s'il veut etre initiateur on non
			if (wantsToBeInitiator) {
				// L'agent demande a etre initiateur
				emit(new askToBeInitiator())
			}
		}
	}
	
	on perturbation [this.actualBehavior!=null]{
		//TODO l'agent informe l'environnement qu'il est deja en cours de negotiation
	}

	// L'agent est "nommé" initiateur par l'environnement
	on ConfirmInitiator {
		unregisterBehavior(this.actualBehavior)
		this.actualBehavior = new Initiator(this, occurrence.participants)
		registerBehavior(actualBehavior)
		//The initiator have to know the participants
	}
	
	//L'agent n'est plus participant (ou initiateur) à la fin de la renegotiation
	on EndRenegotiation {
		unregisterBehavior(this.actualBehavior)
		this.actualBehavior = null
	}

	/* 
	 * @return  List<AgentUUID>
	 * List of relations of the agent with others agents
	 */
	def getRelations : List<Person> {
		this.relations;
	}

	/** 
	 * 
	 * @param List<AgentUUID>
	 * List of relations of the agent with others agents
	 */
	@XmlElement(name = "myrelations")
	def setRelations(myRelations : List<Person>) {
		this.myRelations = myRelations;
	}	

}
