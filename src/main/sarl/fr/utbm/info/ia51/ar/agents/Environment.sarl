package fr.utbm.info.ia51.ar.agents

import fr.utbm.info.ia51.ar.events.ConfirmInitiator
import fr.utbm.info.ia51.ar.events.EndRenegotiation
import fr.utbm.info.ia51.ar.events.PerturbationImpactingMe
import fr.utbm.info.ia51.ar.events.askToBeInitiator
import fr.utbm.info.ia51.ar.events.perturbation
import fr.utbm.info.ia51.ar.requirements.Persons
import fr.utbm.info.ia51.ar.requirements.Trip
import fr.utbm.info.ia51.ar.ui.MyAppFxViewerController
import fr.utbm.info.ia51.ar.ui.Refresh
import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.Behaviors
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.core.Schedules
import io.sarl.javafx.FXBehavior
import io.sarl.lang.core.Address
import java.util.ArrayList
import java.util.LinkedList
import java.util.List
import java.util.Queue
import java.util.Random

/* 
 * 
 * The main agent able to communicate with the GUI
 * 
 * @author : Koffi Agbenya
 * @author : Komi AGOTSI
 * @author : Lilian Durand
 * 
 */
agent Environment {

	uses Behaviors, ExternalContextAccess, DefaultContextInteractions, Schedules, Logging

	var javafxBehavior : FXBehavior

	var negotiationInProgress : boolean
	// Register address of all participants for a perturbation
	var participants : List<Address>
	// Register the address of initiator
	var initiator : Address
	// Time to wait participants in ms
	var delay = 5000
	var data : Persons
	var queue : Queue<perturbation>

	on Initialize {
		setLoggingName("Environment")
		// Initialize data
		this.negotiationInProgress = false
		this.participants = new ArrayList
		this.queue = new LinkedList
		this.initiator = null

		// The first argument within the initialization event is the JavaFX controller.
		// It is not recommended to keep alive a reference to the controller, i.e.
		// the JavaFX controller should not be stored within a field.
		var fxcontroller = occurrence.parameters.get(0) as MyAppFxViewerController

		// The agent learns how to use the UI with a new behavior.
		// This new behavior needs to have a reference to the JavaFX controller
		this.javafxBehavior = new FXBehavior(Environment.this, fxcontroller)
		this.javafxBehavior.registerBehavior

		// data from xml file which contain all participants and his schedules
		data = fxcontroller.data

		// spawn agent n Persons according the PersonnalInfos size
		for (elt : data.personalInfos) {
			spawn(typeof(Person), elt)
		}
		// Query the UI to refresh itself
		javafxBehavior.UISpace.emit(new Refresh)

		// initRenegotiation(new perturbation(null, null))
	}
	
	def initRenegotiation(perturb : perturbation) : void {
		in(2000) [
			info("Sending event")
			emit(new perturbation(null, null))
			in(this.delay) [
				info(this.participants.size + " participants registered")
				// Si personne n'a voulu etre initiateur alors il en choisit un au hasard
				if(this.participants.size < 2){
					info("Not enought participant, endding renegotiation")
					emit(new EndRenegotiation(null))
				}
				else {
					if (this.initiator === null) {
						info("Choosing randomly initiator")
						this.initiator = this.participants.get(new Random().nextInt(this.participants.size))
					}
					// Envoie la confirmation à l'agent concerné
					emit(new ConfirmInitiator(this.participants))[it == this.initiator]
				}
			]
		]
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("Environment stopped.")
	}

	on perturbation [!isMe(occurrence.source) && !this.negotiationInProgress] {
		info("Perturbation received")
		this.negotiationInProgress = true
		info("Another trip " + occurrence.trip)
		initRenegotiation(occurrence)

	/* 
	 * Perturbation create and send by the javafx gui
	 * If the perturbation is received by the environment,
	 * it emit the occurrence to all the agents
	 */
	}

	on perturbation [!isMe(occurrence.source) && this.negotiationInProgress] {
		info("perturbation received but another one is in renegotiation")
		info("Adding perturbation to queue(size : " + (this.queue.size + 1) + ")")
		this.negotiationInProgress = true

		this.queue.add(occurrence)
	}

	on PerturbationImpactingMe {
		// Adding the address of the agent in the participants list
		this.participants.add(occurrence.source)
	}

	// L'evenemtent est trigger seulement si il n'y a pas encore d'initiateur
	on askToBeInitiator [this.initiator === null] {
		this.initiator = occurrence.source
	}

	on EndRenegotiation [!isMe(occurrence.source)]{
		info("Renegotiation finished")

		this.negotiationInProgress = false
		this.participants = new ArrayList
		this.initiator = null
		
		info("new trip : " + occurrence.newTrip)
		
		javafxBehavior.UISpace.emit(new EndRenegotiation(occurrence.newTrip))
		if (this.queue.size > 0) {
			info("Renegotiate with first pertubation in queue (" + (this.queue.size - 1) + " remains)")
			initRenegotiation(this.queue.poll)
			
		}

	/* 
	 * Event perceive by the environment when scheduling process is finished.
	 * It send to javafx gui the new schedule
	 */
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

}
