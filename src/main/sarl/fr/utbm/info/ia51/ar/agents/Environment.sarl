package fr.utbm.info.ia51.ar.agents
import io.sarl.core.Behaviors
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.javafx.FXBehavior
import io.sarl.javafx.FxViewerController
import fr.utbm.info.ia51.ar.ui.Refresh
import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import fr.utbm.info.ia51.ar.events.EndRenegotiation
import fr.utbm.info.ia51.ar.events.askToBeInitiator
import fr.utbm.info.ia51.ar.events.perturbation

/*
 * 
 * The main agent able to communicate with the GUI
 * 
 * @author : Koffi Agbenya
 * 
 */
agent Environment {

	uses Behaviors, ExternalContextAccess, Logging

	var javafxBehavior : FXBehavior

	on Initialize {
		// The first argument within the initialization event is the JavaFX controller.
		// It is not recommended to keep alive a reference to the controller, i.e.
		// the JavaFX controller should not be stored within a field.
		var fxcontroller = occurrence.parameters.get(0) as FxViewerController
		
		// The agent learns how to use the UI with a new behavior.
		// This new behavior needs to have a reference to the JavaFX controller
		this.javafxBehavior = new FXBehavior(this, fxcontroller)
		this.javafxBehavior.registerBehavior
		
		// Query the UI to refresh itself
		javafxBehavior.UISpace.emit(new Refresh)
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent was stopped.")
	}

	on perturbation {

		/* 
		 * Perturbation create and send by the javafx gui
		 * If the perturbation is received by the environment,
		 * it emit the occurrence to all the agents
		 */ 
	}

	on askToBeInitiator {

		/* 
		 * If an pertubation is occured and sent to all the agents, one of them or all agents who's concerned
		 * send a signal to environment for being an initiator. The first agent's response perceive by the 
		 * environment will be the initiator. 
		 */
	}

	on EndRenegotiation {

		/* 
		 * Event perceive by the environment when scheduling process is finished.
		 * It send to javafx gui the new schedule
		 */
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

}
