package fr.utbm.info.ia51.ar.agents
import io.sarl.core.Behaviors
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.javafx.FXBehavior
import fr.utbm.info.ia51.ar.ui.Refresh
import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import fr.utbm.info.ia51.ar.events.EndRenegotiation
import fr.utbm.info.ia51.ar.events.askToBeInitiator
import fr.utbm.info.ia51.ar.events.perturbation
<<<<<<< HEAD
import io.sarl.core.Lifecycle
import fr.utbm.info.ia51.ar.ui.MyAppFxViewerController
import fr.utbm.info.ia51.ar.requirements.Persons
=======
import fr.utbm.info.ia51.ar.events.PerturbationImpactingMe
import io.sarl.lang.core.Address
import java.util.List
import io.sarl.core.DefaultContextInteractions
import fr.utbm.info.ia51.ar.events.ConfirmInitiator
import io.sarl.core.Schedules
import java.util.Random;
>>>>>>> a964ccd9ac12f65bb890ba9dff4d4bace10f9fbb

/*
 * 
 * The main agent able to communicate with the GUI
 * 
 * @author : Koffi Agbenya
 * @author : Komi AGOTSI
 * 
 */
agent Environment {

<<<<<<< HEAD
	uses Behaviors, ExternalContextAccess, Logging, Lifecycle

	var javafxBehavior : FXBehavior
	
	var data :  Persons

	on Initialize {
		info("I lauching")
=======
	uses Behaviors, ExternalContextAccess, DefaultContextInteractions, Schedules, Logging

	var javafxBehavior : FXBehavior
	
	var negotiationInProgress : boolean
	//Register address of all participants for a perturbation
	var participants : List<Address>
	//Register the address of initiator
	var initiator : Address
	//Time to wait participants in ms
	var delay = 1000

	on Initialize {
		//Initialize data
		this.negotiationInProgress = false
		this.participants = null
		this.initiator = null
		
>>>>>>> a964ccd9ac12f65bb890ba9dff4d4bace10f9fbb
		// The first argument within the initialization event is the JavaFX controller.
		// It is not recommended to keep alive a reference to the controller, i.e.
		// the JavaFX controller should not be stored within a field.
		var fxcontroller = occurrence.parameters.get(0) as MyAppFxViewerController
			
		// The agent learns how to use the UI with a new behavior.
		// This new behavior needs to have a reference to the JavaFX controller
		this.javafxBehavior = new FXBehavior(Environment.this, fxcontroller)
		this.javafxBehavior.registerBehavior

		//data from xml file which contain all participants and his schedules
		data = fxcontroller.data
		
		//spawn agent n Persons according the PersonnalInfos size 
		for(elt : data.personalInfos){
		spawn(typeof(Person),elt)		
		}
		
		// Query the UI to refresh itself
		javafxBehavior.UISpace.emit(new Refresh)
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent was stopped.")
	}

	on perturbation {

		this.negotiationInProgress = true
		emit(occurrence)
		
		//Attend les participants this.delay ms
		in(this.delay)[
			//Si personne n'a voulu etre initiateur alors il en choisit un au hasard
			if (this.initiator === null) {
				this.initiator = this.participants.get(new Random().nextInt(this.participants.size))
				emit(new ConfirmInitiator(this.participants))[it == this.initiator]
			}
		]
		/* 
		 * Perturbation create and send by the javafx gui
		 * If the perturbation is received by the environment,
		 * it emit the occurrence to all the agents
		 */ 
	}

	on PerturbationImpactingMe {
		// Adding the address of the agent in the participants list
		this.participants.add(occurrence.source)
	}

	//L'evenemtent est trigger seulement si il n'y a pas encore d'initiateur
	on askToBeInitiator [initiator === null]{
		this.initiator = occurrence.source
		
		//Envoie la confirmation à l'agent concerné
		emit(new ConfirmInitiator(this.participants))[it == this.initiator]
		/* 
		 * If an pertubation is occured and sent to all the agents, one of them or all agents who's concerned
		 * send a signal to environment for being an initiator. The first agent's response perceive by the 
		 * environment will be the initiator. 
		 */
	}

	on EndRenegotiation {
		
		this.negotiationInProgress = false
		this.participants = null
		this.initiator = null

		/* 
		 * Event perceive by the environment when scheduling process is finished.
		 * It send to javafx gui the new schedule
		 */
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

}
