/** 
 * 
 */
package fr.utbm.info.ia51.ar.behaviors

import fr.utbm.info.ia51.ar.capacities.ManageSchedule
import fr.utbm.info.ia51.ar.events.EndRenegotiation
import fr.utbm.info.ia51.ar.events.perturbation
import fr.utbm.info.ia51.ar.events.renegotiation
import fr.utbm.info.ia51.ar.events.renegotiationAgreed
import fr.utbm.info.ia51.ar.events.renegotiationDisagreed
import fr.utbm.info.ia51.ar.requirements.Trip
import fr.utbm.info.ia51.ar.skills.ManageScheduleSkill
import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.lang.core.Address
import java.time.Instant
import java.util.List

/** 
 * @author Koffi Agbenya
 * @author Lilian Durand
 * 
 */
behavior Initiator {
	uses Logging, ManageSchedule, DefaultContextInteractions

	var nbAnswer : int
	var finished : boolean = false
	var participants : List<Address>
	var nbParticipants : int
	var perturb : perturbation
	var newTrip : Trip
	var renegotiationID : int
	var tRenegotiationStart : long
	val tMax : int = 10000 // maximum time in seconds for initialize a new renegotiation

	on renegotiationAgreed {
		if ((this.nbAnswer++ >= this.nbParticipants - 2) && !this.finished &&
			(occurrence.renegotiationID == this.renegotiationID)) {
			this.finished = true
			info("Ending successfuly renegotiation all participants agreed")
			emit(new EndRenegotiation(this.newTrip))
		}
	}

	on renegotiationDisagreed {
		// Create a new renegotiation only if it remains time
		if (occurrence.renegotiationID == this.renegotiationID) {
			this.renegotiationID++
			if (Instant.now().toEpochMilli() - this.tRenegotiationStart < this.tMax) {
				info("starting new renegotiation")
				if (isNewTripOK(occurrence.newTrip))
					this.newTrip = occurrence.newTrip
				else
					this.newTrip = computeNewTrip(this.perturb)
				this.nbAnswer = 0

				emit(new renegotiation(this.newTrip, this.perturb, this.renegotiationID))
			} else {
				if (!this.finished) {
					this.finished = true
					info("Ending renegotiation cause of lack of time")
					emit(new EndRenegotiation(this.newTrip))
				}
			}
		}
	}

	on Initialize {
		setSkill(new ManageScheduleSkill)

		this.participants = occurrence.parameters.get(0) as List<Address>
		this.perturb = occurrence.parameters.get(1) as perturbation
		this.newTrip = computeNewTrip(this.perturb)
		this.nbParticipants = this.participants.size
		this.nbAnswer = 0
		this.tRenegotiationStart = Instant.now().toEpochMilli()
		this.renegotiationID = 0

		info("Emitting renegotiation")
		
		emit(new renegotiation(this.newTrip, this.perturb, this.renegotiationID))

		// Event trigger before the behavior begin to live or to be used.
			// You should put all the initialization statements in this block of code.
	}

	on Destroy {
		// Event trigger when the behavior is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("I am not initiator anymore")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a behavior of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a behavior of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
}
