/* 
 * $Id$
 * 
 * Copyright (c) 2019 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package fr.ciadlab.fogsimu.fx

import com.dlsc.formsfx.model.util.ResourceBundleService
import com.dlsc.preferencesfx.PreferencesFx
import fr.ciadlab.fogsimu.config.Configuration
import fr.ciadlab.fogsimu.fx.preferences.FogFxPreferenceManager
import fr.ciadlab.fogsimu.scenario.FogSimulationScenarioFactory
import io.sarl.bootstrap.SRE
import java.io.FileWriter
import java.io.PrintWriter
import java.net.URL
import java.text.MessageFormat
import java.util.ResourceBundle
import javafx.application.Platform
import javafx.fxml.FXML
import javafx.scene.Node
import javafx.scene.control.Button
import javafx.scene.control.Label
import javafx.scene.control.SplitPane
import javafx.scene.input.MouseEvent
import javafx.stage.FileChooser.ExtensionFilter
import org.arakhne.afc.gis.primitive.GISContainer
import org.arakhne.afc.gis.ui.GisPane
import org.arakhne.afc.simulation.framework.base.fx.AbstractFxController
import org.arakhne.afc.simulation.framework.base.fx.Dialogs
import org.arakhne.afc.simulation.framework.base.fx.controls.LogPanel
import org.arakhne.afc.simulation.framework.base.fx.preferences.PreferenceCategoryBuilder
import org.arakhne.afc.simulation.framework.base.preferences.PreferenceManager
import org.arakhne.afc.simulation.framework.base.scenario.SimulationScenarioFactory
import org.arakhne.afc.simulation.framework.framework1d.scenario.SimulationScenario1d
import org.arakhne.afc.text.TextUtil

/** JavaFX controller.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class FxController extends AbstractFxController<SimulationScenario1d<Configuration>, FogFxPreferenceManager> {

	@FXML var footnote : Label
	@FXML var setupButton : Button
	@FXML var startButton : Button
	@FXML var stopButton : Button
	@FXML var noZoomButton : Button
	@FXML var preferenceButton : Button
	@FXML var logPanel : LogPanel
	@FXML var clearConsoleButton : Button
	@FXML var saveConsoleButton : Button
	@FXML var verticalSplitPane : SplitPane

	var dataPane : GisPane<GISContainer<?>>
	
	override initialize(location : URL, resources : ResourceBundle) {
		super.initialize(location, resources)
		this.verticalSplitPane.setDividerPositions(0.8, 0.0)
	}
	
	protected override createViewerNode(scenario : SimulationScenario1d<Configuration>) : Node {
		this.dataPane = new GisPane(scenario.mapContainer)
		val mouseLocationPattern = this.bundle.getString("MOUSE_POSITION")
		this.dataPane.onMouseMoved = [ ^event |
			val mousePosition = this.dataPane.toDocumentPosition(^event.x, ^event.y)
			this.footnote.text = MessageFormat::format(mouseLocationPattern,
				TextUtil::formatDouble(^event.x, 1), TextUtil::formatDouble(^event.y, 1),
				TextUtil::formatDouble(mousePosition.x, 4), TextUtil::formatDouble(mousePosition.y, 4))
		]
		this.dataPane.addEventHandler(MouseEvent::MOUSE_DRAGGED, [ ^event |
			val mousePosition = this.dataPane.toDocumentPosition(^event.x, ^event.y)
			this.footnote.text = MessageFormat.format(mouseLocationPattern,
				TextUtil::formatDouble(^event.x, 1), TextUtil::formatDouble(^event.y, 1),
				TextUtil::formatDouble(mousePosition.x, 4), TextUtil::formatDouble(mousePosition.y, 4))
		])
		return dataPane
	}

	protected override createSimulationScenarioFactory : SimulationScenarioFactory<SimulationScenario1d<Configuration>> {
		new FogSimulationScenarioFactory
	}

	protected override beforeScenarioSetup {
		this.setupButton.disable = true
		Platform::runLater [this.logPanel.clear]
	}

	protected override afterScenarioInit {
		this.startButton.disable = false
		this.noZoomButton.disable = false
		var logger = SRE::bootstrap.kernelLogger
		if (logger !== null) {
			this.logPanel.bindTo(logger, !PreferenceManager::singleton.logOnConsole)
		}
	}

	protected override afterScenarioSetup(error : boolean) {
		this.setupButton.disable = !error
	}
	
	/** Setup the simulator.
	 */
	@SuppressWarnings("discouraged_reference")
	@FXML
	protected def actionSetup {
		val file = selectScenarioFile
		if (file !== null) {
			var task = createSetupTask(file, new FogSimulationScenarioFactory)
			task.start
		}
	}
	
	protected override beforeSimulationStart {
		this.startButton.disable = true
		this.preferenceButton.disable = true
	}

	protected override afterSimulationStart(error : boolean) {
		this.startButton.disable = !error
		this.setupButton.disable = !error
		this.stopButton.disable = error
		this.clearConsoleButton.disable = error
		this.saveConsoleButton.disable = error
	}

	/** Start the simulator.
	 */
	@FXML
	protected def actionStart {
		startSimulation
	}

	protected def beforeSimulationStop {
		this.stopButton.disable = true
	}

	protected def afterSimulationStop {
		var logger = SRE::bootstrap.kernelLogger
		if (logger !== null) {
			this.logPanel.unbindFrom(logger)
		}
		this.setupButton.disable = false
		this.preferenceButton.disable = false
	}

	/** Stop the simulator.
	 */
	@FXML
	protected def actionStop {
		safeExit
		this.stopButton.disable = true
		this.noZoomButton.disable = true
		this.setupButton.disable = false
	}

	/** Reset the zoom on the view.
	 */
	@FXML
	protected def actionNoZoom {
		this.dataPane.resetScale
		this.dataPane.resetViewportCenter
	}

	/** Clear the console.
	 */
	@FXML
	protected def actionClearConsole {
		this.logPanel.clear
	}

	/** Save the console.
	 */
	@FXML
	protected def actionSaveConsole {
		var file = selectFile(
			this.bundle.getString("SAVE_LOG_TITLE"), true,
			new ExtensionFilter(this.bundle.getString("LOG_FILE"), "*.log"))
		if (file !== null) {
			try {
				var is = new PrintWriter(new FileWriter(file))
				try {
					this.logPanel.save(is)
				} finally {
					is.close
				}
			} catch (ex : Throwable) {
				Dialogs::alert(ex, this.bundle)
			}
		}
	}

	/** Show the preferences for the simulator.
	 */
	@FXML
	protected def actionPreference {
		var prefs = this.preferenceManager

		var builder = new PreferenceCategoryBuilder
		prefs.buildPreferenceCategories(builder)
		var cats = builder.categories

		// Read the values from the preferences
		prefs.reset

		var prefsFx = PreferencesFx::of(prefs.storageHandler, cats)
		prefsFx.i18n(new ResourceBundleService(this.bundle))
		prefsFx.saveSettings(true)
		prefsFx.show(true)

		// Force saving of preference store
		prefs.sync
	}

	def createPreferenceManager : FogFxPreferenceManager {
		new FogFxPreferenceManager
	}

}
