/* 
 * $Id$
 * 
 * Copyright (c) 2019 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package fr.ciadlab.fogsimu.fx.drawers

import fr.ciadlab.fogsimu.environment.SpeedLimitPanel
import fr.ciadlab.fogsimu.fx.FxApp
import fr.ciadlab.fogsimu.preferences.FogPreferenceManager
import javafx.scene.image.Image
import javafx.scene.paint.Color
import org.arakhne.afc.gis.ui.drawers.AbstractMapPointDrawer
import org.arakhne.afc.math.geometry.d2.d.Point2d
import org.arakhne.afc.math.geometry.d2.d.Vector2d
import org.arakhne.afc.nodefx.ZoomableGraphicsContext
import org.arakhne.afc.references.SoftValueHashMap
import org.arakhne.afc.vmutil.Resources

/** Drawer for the electronic panels.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class SpeedLimitPanelDrawer extends AbstractMapPointDrawer<SpeedLimitPanel> {

	static val icons = new SoftValueHashMap<Integer, Image>

	static def getIcon(speedLimit : int) : Image {
		var ic = icons.get(speedLimit)
		if (ic === null) {
			var url = Resources::getResource(typeof(FxApp), "panels/speedlimit" + speedLimit + ".png");
			ic = new Image(url.toString as String)
			icons.put(speedLimit, ic)
		}
		return ic
	}

	def getPanelSize : double {
		FogPreferenceManager::singleton.panelSize
	}
	
	def getPrimitiveType : Class<? extends SpeedLimitPanel> {
		typeof(SpeedLimitPanel)
	}

	def draw(gc : ZoomableGraphicsContext, element : SpeedLimitPanel) {
		var p = element.roadPosition

		var p2 = new Point2d
		var tg = new Vector2d
		p.segment.projectsOnPlane(p.curvilineCoordinate, p.lateralDistance, p2, tg)

		tg.makeOrthogonal
		if (element.roadPosition.lateralDistance < 0.0) {
			tg.negate
		}
		
		val pSize = getPanelSize
		
		var p1 = p2 + tg * pSize

		gc.fill = Color::BLACK
		gc.stroke = Color::BLACK

		// Line between the panel and the road
		gc.beginPath
		gc.moveTo(p1.x, p1.y)
		gc.lineTo(p2.x, p2.y)
		gc.stroke()

		// Draw the icon
		var image = element.speedLimit.getIcon
		if (image !== null) {
			val pDSize = getPanelSize / 2.0
			gc.drawImage(image, p1.x - pDSize, p1.y - pDSize, pSize, pSize)
		} else {
			gc.beginPath
			val ptsSize = element.pointSize
			val x = p1.x - ptsSize
			val y = p1.y - ptsSize
			val mx = p1.x + ptsSize
			val my = p1.y + ptsSize
			gc.moveTo(x, y)
			gc.lineTo(mx, y)
			gc.lineTo(mx, my)
			gc.lineTo(x, my)
			gc.closePath
			gc.fill()
		}
	}
		
}
