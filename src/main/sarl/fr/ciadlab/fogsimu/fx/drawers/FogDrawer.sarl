/* 
 * $Id$
 * 
 * Copyright (c) 2019 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package fr.ciadlab.fogsimu.fx.drawers

import fr.ciadlab.fogsimu.environment.FogZone
import fr.ciadlab.fogsimu.preferences.FogPreferenceManager
import javafx.scene.paint.Color
import org.arakhne.afc.gis.ui.drawers.AbstractMapCircleDrawer
import org.arakhne.afc.nodefx.ZoomableGraphicsContext

/** Drawer for the fog.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class FogDrawer extends AbstractMapCircleDrawer<FogZone> {

	/** Constructor.
	 */
	new {
	}

	def getFogColor(gc : ZoomableGraphicsContext) : Color {
		gc.rgb(FogPreferenceManager::singleton.fogColor)
	}

	def getMaximumVisibilityDistance : double {
		FogPreferenceManager::singleton.fogMaximumVisibilityDistance
	}

	def getOpacityFactor : double {
		FogPreferenceManager::singleton.fogOpacityFactor
	}

	
	def getPrimitiveType : Class<? extends FogZone> {
		typeof(FogZone)
	}

	def draw(gc : ZoomableGraphicsContext, element : FogZone) {
		gc.fill = gc.rgba(gc.getFogColor, element.visibility.toTransparency)
		val radius = element.radius
		val diameter = radius + radius
		val minx = element.x - radius
		val miny = element.y - radius
		gc.fillOval(minx, miny, diameter, diameter);
	}

	def toTransparency(visibility : double) : double {
		val dist = maximumVisibilityDistance
		getOpacityFactor * Math::max(0.0, dist - visibility) / dist
	}

}
