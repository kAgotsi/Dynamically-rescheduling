/* 
 * $Id$
 * This file is a part of the Arakhne Foundation Classes, http://www.arakhne.org/afc
 * 
 * Copyright (c) 2000-2012 Stephane GALLAND.
 * Copyright (c) 2005-10, Multiagent Team, Laboratoire Systemes et Transports,
 * Universite de Technologie de Belfort-Montbeliard.
 * Copyright (c) 2013-2019 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package fr.ciadlab.fogsimu.fx.preferences

import com.dlsc.formsfx.model.validators.DoubleRangeValidator
import com.dlsc.preferencesfx.model.Setting
import fr.ciadlab.fogsimu.preferences.FogPreferenceManager
import javafx.beans.property.DoubleProperty
import javafx.beans.property.IntegerProperty
import javafx.beans.property.SimpleDoubleProperty
import javafx.beans.property.SimpleIntegerProperty
import org.arakhne.afc.simulation.framework.base.fx.preferences.PreferenceCategoryBuilder
import org.arakhne.afc.simulation.framework.base.preferences.PreferenceManager
import org.arakhne.afc.simulation.framework.framework1d.fx.preferences.AbstractFxPreferenceManager1d

/**
 * Manager of preferences for a simulator.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class FogFxPreferenceManager extends AbstractFxPreferenceManager1d implements FogPreferenceManager {

	public static val PREFERENCES_CATEGORY_FOG = "FOG"

	public static val PREFERENCES_GROUP_FOG_PROPERTIES = "FPROPERTIES"

	public static val PREFERENCES_GROUP_FOG_DRAWERS = "FDRAWERS"

	public static val PREFERENCES_CATEGORY_ROADSIGNS = "ROADSIGNS"

	public static val PREFERENCES_GROUP_ROADSIGNS_DRAWERS = "RSDRAWERS"

	
	/** Replies the singleton.
	 */
	static def getSingleton : FogFxPreferenceManager {
		PreferenceManager::singleton as FogFxPreferenceManager
	}
	
	override getStorageClass : Class<?> {
		typeof(FogFxPreferenceManager)
	}

	def buildPreferenceCategories(extension builder : PreferenceCategoryBuilder) {
		super.buildPreferenceCategories(builder)
		builder.create(PREFERENCES_CATEGORY_FOG, PREFERENCES_GROUP_FOG_PROPERTIES,
			Setting::of(FOG_DEFAULT_RADIUS, this.fogDefaultRadiusProperty)
			.validate(DoubleRangeValidator::atLeast(0.0, "MUST_BE_POSITIVE_OR_ZERO")))
		builder.create(PREFERENCES_CATEGORY_FOG, PREFERENCES_GROUP_FOG_PROPERTIES,
			Setting::of(FOG_DEFAULT_VISIBILITY_DISTANCE, this.fogDefaultVisibilityDistanceProperty)
			.validate(DoubleRangeValidator::atLeast(0.0, "MUST_BE_POSITIVE_OR_ZERO")))

		builder.create(PREFERENCES_CATEGORY_FOG, PREFERENCES_GROUP_FOG_DRAWERS,
			ofColorType(FOG_COLOR, this.fogColorProperty))
		builder.create(PREFERENCES_CATEGORY_FOG, PREFERENCES_GROUP_FOG_DRAWERS,
			ofColorType(FOG_COLOR_ON_ROADS, this.fogColorOnRoadsProperty))
		builder.create(PREFERENCES_CATEGORY_FOG, PREFERENCES_GROUP_FOG_DRAWERS,
			Setting::of(FOG_MAX_VISIBILITY_DISTANCE, this.fogMaximumVisibilityDistanceProperty)
			.validate(DoubleRangeValidator::atLeast(0.0, "MUST_BE_POSITIVE_OR_ZERO")))
		builder.create(PREFERENCES_CATEGORY_FOG, PREFERENCES_GROUP_FOG_DRAWERS,
			Setting::of(FOG_OPACITY_FACTOR, this.fogOpacityFactorProperty)
			.validate(DoubleRangeValidator::between(0.0, 1.0, "MUST_BE_ZERO_TO_ONE")))

		builder.create(PREFERENCES_CATEGORY_ROADSIGNS, PREFERENCES_GROUP_ROADSIGNS_DRAWERS,
			Setting::of(PANEL_SIZE, this.panelSizeProperty)
			.validate(DoubleRangeValidator::atLeast(0.0, "MUST_BE_POSITIVE_OR_ZERO")))
	}

	override reset {
		super.reset
		resetFogDefaultRadius
		resetFogDefaultVisibilityDistance
		resetFogMaximumVisibilityDistance
		resetFogColor
		resetFogColorOnRoads
		resetFogOpacityFactor
		resetPanelSize
	}

	protected override saveProperties {
		super.saveProperties
		saveFogDefaultRadius
		saveFogDefaultVisibilityDistance
		saveFogMaximumVisibilityDistance
		saveFogColor
		saveFogColorOnRoads
		saveFogOpacityFactor
		savePanelSize
	}
	
	
	

	var fogDefaultRadius : DoubleProperty

	/** Replies the default radius for the fog.
	 */
	def getFogDefaultRadiusProperty : DoubleProperty {
		if (this.fogDefaultRadius === null) {
			this.fogDefaultRadius = new SimpleDoubleProperty(this, FOG_DEFAULT_RADIUS, defaultFogDefaultRadius) {
				protected override invalidated {
					var value = get
					if (value < 0.0) {
						set(0.0)
					}
				}
			}
		}
		return this.fogDefaultRadius
	}

	private def nameFogDefaultRadius : String {
		name(PREFERENCES_CATEGORY_FOG, PREFERENCES_GROUP_FOG_PROPERTIES, FOG_DEFAULT_RADIUS)
	}

	private def defaultFogDefaultRadius : double {
		nameFogDefaultRadius.prefDouble(FOG_DEFAULT_RADIUS_VALUE)
	}

	private def resetFogDefaultRadius {
		if (this.fogDefaultRadius !== null) {
			this.fogDefaultRadius.set(defaultFogDefaultRadius)
		}
	}

	private def saveFogDefaultRadius {
		if (this.fogDefaultRadius !== null) {
			this.store.putDouble(nameFogDefaultRadius, this.fogDefaultRadius.get)
		}
	}

	def getFogDefaultRadius : double {
		this.fogDefaultRadiusProperty.get
	}
	
	def setFogDefaultRadius(distance : double) {
		this.fogDefaultRadiusProperty.set(distance)
	}



	var fogDefaultVisibilityDistance : DoubleProperty

	/** Replies the default visibility distance within fog.
	 */
	def getFogDefaultVisibilityDistanceProperty : DoubleProperty {
		if (this.fogDefaultVisibilityDistance === null) {
			this.fogDefaultVisibilityDistance = new SimpleDoubleProperty(this, FOG_DEFAULT_VISIBILITY_DISTANCE,
				defaultFogDefaultVisibilityDistance) {
				protected override invalidated {
					var value = get
					if (value < 0.0) {
						set(0.0)
					}
				}
			}
		}
		return this.fogDefaultVisibilityDistance
	}

	private def nameFogDefaultVisibilityDistance : String {
		name(PREFERENCES_CATEGORY_FOG, PREFERENCES_GROUP_FOG_PROPERTIES, FOG_DEFAULT_VISIBILITY_DISTANCE)
	}

	private def defaultFogDefaultVisibilityDistance : double {
		nameFogDefaultVisibilityDistance.prefDouble(FOG_DEFAULT_VISIBILITY_DISTANCE_VALUE)
	}

	private def resetFogDefaultVisibilityDistance {
		if (this.fogDefaultVisibilityDistance !== null) {
			this.fogDefaultVisibilityDistance.set(defaultFogDefaultVisibilityDistance)
		}
	}

	private def saveFogDefaultVisibilityDistance {
		if (this.fogDefaultVisibilityDistance !== null) {
			this.store.putDouble(nameFogDefaultVisibilityDistance, this.fogDefaultVisibilityDistance.get)
		}
	}

	def getFogDefaultVisibilityDistance : double {
		this.fogDefaultVisibilityDistanceProperty.get
	}
	
	def setFogVisibilityDistance(distance : double) {
		this.fogDefaultVisibilityDistanceProperty.set(distance)
	}



	var fogMaximumVisibilityDistance : DoubleProperty

	/** Replies the maximum visibility distance within fog for drawing.
	 */
	def getFogMaximumVisibilityDistanceProperty : DoubleProperty {
		if (this.fogMaximumVisibilityDistance === null) {
			this.fogMaximumVisibilityDistance = new SimpleDoubleProperty(this, FOG_MAX_VISIBILITY_DISTANCE,
				defaultFogMaximumVisibilityDistance) {
				protected override invalidated {
					var value = get
					if (value < 0.0) {
						set(0.0)
					}
				}
			}
		}
		return this.fogMaximumVisibilityDistance
	}

	private def nameFogMaximumVisibilityDistance : String {
		name(PREFERENCES_CATEGORY_FOG, PREFERENCES_GROUP_FOG_DRAWERS, FOG_MAX_VISIBILITY_DISTANCE)
	}

	private def defaultFogMaximumVisibilityDistance : double {
		nameFogMaximumVisibilityDistance.prefDouble(FOG_MAX_VISIBILITY_DISTANCE_VALUE)
	}

	private def resetFogMaximumVisibilityDistance {
		if (this.fogMaximumVisibilityDistance !== null) {
			this.fogMaximumVisibilityDistance.set(defaultFogMaximumVisibilityDistance)
		}
	}

	private def saveFogMaximumVisibilityDistance {
		if (this.fogMaximumVisibilityDistance !== null) {
			this.store.putDouble(nameFogMaximumVisibilityDistance, this.fogMaximumVisibilityDistance.get)
		}
	}

	def getFogMaximumVisibilityDistance : double {
		this.fogMaximumVisibilityDistanceProperty.get
	}
	
	def setFogMaximumVisibilityDistance(distance : double) {
		this.fogMaximumVisibilityDistanceProperty.set(distance)
	}



	var fogColor : IntegerProperty

	/** Replies the fog color
	 */
	def getFogColorProperty : IntegerProperty {
		if (this.fogColor === null) {
			this.fogColor = new SimpleIntegerProperty(this, FOG_COLOR, defaultFogColor) {
				protected override invalidated {
					var value = get
					if (value < 0) {
						set(0)
					}
				}
			}
		}
		return this.fogColor
	}

	private def nameFogColor : String {
		name(PREFERENCES_CATEGORY_FOG, PREFERENCES_GROUP_FOG_DRAWERS, FOG_COLOR)
	}

	private def defaultFogColor : int {
		nameFogColor.prefInt(FOG_COLOR_VALUE)
	}

	private def resetFogColor {
		if (this.fogColor !== null) {
			this.fogColor.set(defaultFogColor)
		}
	}

	private def saveFogColor {
		if (this.fogColor !== null) {
			this.store.putInt(nameFogColor, this.fogColor.get)
		}
	}

	def getFogColor : int {
		this.fogColorProperty.get
	}
	
	def setFogColor(color : int) {
		this.fogColorProperty.set(color)
	}




	var fogColorOnRoads : IntegerProperty

	/** Replies the fog color on roads
	 */
	def getFogColorOnRoadsProperty : IntegerProperty {
		if (this.fogColorOnRoads === null) {
			this.fogColorOnRoads = new SimpleIntegerProperty(this, FOG_COLOR_ON_ROADS, defaultFogColorOnRoads) {
				protected override invalidated {
					var value = get
					if (value < 0) {
						set(0)
					}
				}
			}
		}
		return this.fogColorOnRoads
	}

	private def nameFogColorOnRoads : String {
		name(PREFERENCES_CATEGORY_FOG, PREFERENCES_GROUP_FOG_DRAWERS, FOG_COLOR_ON_ROADS)
	}

	private def defaultFogColorOnRoads : int {
		nameFogColorOnRoads.prefInt(FOG_COLOR_ON_ROADS_VALUE)
	}

	private def resetFogColorOnRoads {
		if (this.fogColorOnRoads !== null) {
			this.fogColorOnRoads.set(defaultFogColorOnRoads)
		}
	}

	private def saveFogColorOnRoads {
		if (this.fogColorOnRoads !== null) {
			this.store.putInt(nameFogColorOnRoads, this.fogColorOnRoads.get)
		}
	}

	def getFogColorOnRoads : int {
		this.fogColorOnRoadsProperty.get
	}
	
	def setFogColorOnRoads(color : int) {
		this.fogColorOnRoadsProperty.set(color)
	}




	var fogOpacityFactor : DoubleProperty

	/** Replies the opacity factor for drawing fog.
	 */
	def getFogOpacityFactorProperty : DoubleProperty {
		if (this.fogOpacityFactor === null) {
			this.fogOpacityFactor = new SimpleDoubleProperty(this, FOG_OPACITY_FACTOR, defaultFogOpacityFactor) {
				protected override invalidated {
					var value = get
					if (value < 0.0) {
						set(0.0)
					} else if (value > 1.0) {
						set(1.0)
					}
				}
			}
		}
		return this.fogOpacityFactor
	}

	private def nameFogOpacityFactor : String {
		name(PREFERENCES_CATEGORY_FOG, PREFERENCES_GROUP_FOG_DRAWERS, FOG_OPACITY_FACTOR)
	}

	private def defaultFogOpacityFactor : double {
		nameFogOpacityFactor.prefDouble(FOG_OPACITY_FACTOR_VALUE)
	}

	private def resetFogOpacityFactor {
		if (this.fogOpacityFactor !== null) {
			this.fogOpacityFactor.set(defaultFogOpacityFactor)
		}
	}

	private def saveFogOpacityFactor {
		if (this.fogOpacityFactor !== null) {
			this.store.putDouble(nameFogOpacityFactor, this.fogOpacityFactor.get)
		}
	}

	def getFogOpacityFactor : double {
		this.fogOpacityFactorProperty.get
	}
	
	def setFogOpacityFactor(color : double) {
		this.fogOpacityFactorProperty.set(color)
	}




	var panelSize : DoubleProperty

	/** Replies the size of the road panels on the map.
	 */
	def getPanelSizeProperty : DoubleProperty {
		if (this.panelSize === null) {
			this.panelSize = new SimpleDoubleProperty(this, PANEL_SIZE, defaultPanelSize) {
				protected override invalidated {
					var value = get
					if (value < 0.0) {
						set(0.0)
					}
				}
			}
		}
		return this.panelSize
	}

	private def namePanelSize : String {
		name(PREFERENCES_CATEGORY_ROADSIGNS, PREFERENCES_GROUP_ROADSIGNS_DRAWERS, PANEL_SIZE)
	}

	private def defaultPanelSize : double {
		namePanelSize.prefDouble(PANEL_SIZE_VALUE)
	}

	private def resetPanelSize {
		if (this.panelSize !== null) {
			this.panelSize.set(defaultPanelSize)
		}
	}

	private def savePanelSize {
		if (this.panelSize !== null) {
			this.store.putDouble(namePanelSize, this.panelSize.get)
		}
	}

	def getPanelSize : double {
		this.panelSizeProperty.get
	}
	
	def setPanelSize(size : double) {
		this.panelSizeProperty.set(size)
	}
	
}
