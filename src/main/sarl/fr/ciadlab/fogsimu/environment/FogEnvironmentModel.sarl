/* 
 * $Id$
 * 
 * Copyright (c) 2019 The original authors, and other authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package fr.ciadlab.fogsimu.environment

import org.arakhne.afc.gis.road.primitive.RoadConnection
import org.arakhne.afc.gis.road.primitive.RoadSegment
import org.arakhne.afc.math.graph.DynamicDepthUpdater
import org.arakhne.afc.simulation.framework.framework1d.environment.EnvironmentModel1d

import static java.lang.Math.*
import org.arakhne.afc.simulation.framework.framework1d.environment.EnvironmentModel1d.PerceptionBuilder
import org.arakhne.afc.math.graph.SubGraph
import org.arakhne.afc.math.graph.GraphIterationElement
import org.arakhne.afc.simulation.framework.framework1d.environment.CullingResult1d
import org.arakhne.afc.simulation.framework.framework1d.environment.RoadObject
import org.arakhne.afc.math.geometry.IntersectionType
import org.arakhne.afc.math.geometry.d1.d.Point1d

/**
 * Model of the environment for the fog traffic simulation.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class FogEnvironmentModel extends EnvironmentModel1d {

	public static val FOG_ZONE_REFERENCE_ATTRIBUTE_NAME = "~FOG_ZONE_REFERENCE"

	protected override createDynamicPerceptionDepthUpdater : DynamicDepthUpdater<RoadSegment, RoadConnection> {
		new Updater
	}

	protected override createPerceptionBuilder : PerceptionBuilder {
		new FogPerceptionBuilder
	}

	/** 
	 * Dynamic depth updater.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	private static class Updater implements DynamicDepthUpdater<RoadSegment, RoadConnection> {
	
		override updateDepth(previousSegment : RoadSegment, segment : RoadSegment, point : RoadConnection,
			distanceToReach : double, distanceToConsume : double) : double {
				
			var fogZone : FogZone = segment.getUserData(FOG_ZONE_REFERENCE_ATTRIBUTE_NAME)
			
			if (fogZone !== null) {
				return min(distanceToConsume, fogZone.visibility)
			}
			
			return distanceToConsume
		}
	
	}

	/** 
	 * Perception builder and selector in fog condition.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	protected static class FogPerceptionBuilder extends PerceptionBuilder {
		
		override segmentAdded(graph : SubGraph<RoadSegment, RoadConnection, ?>, elementDescription : GraphIterationElement<RoadSegment, RoadConnection>) {
			super.segmentAdded(graph, elementDescription)

			var segment = elementDescription.segment
			var fogZone : FogZone = segment.getUserData(FOG_ZONE_REFERENCE_ATTRIBUTE_NAME)
			var len = segment.length
			if (fogZone !== null && fogZone.visibility <= elementDescription.distanceToConsume) {
				val beg = segment.beginPoint == elementDescription.point
				var c : double
				var d : double
				if (this.position.segment == segment) {
					if (beg) {
						c = this.position.curvilineCoordinate + fogZone.visibility
					} else {
						c = this.position.curvilineCoordinate - fogZone.visibility
					}
					d = fogZone.visibility
				} else if (beg) {
					c = fogZone.visibility
					d = elementDescription.distanceToReachSegment + fogZone.visibility
				} else {
					c = len - fogZone.visibility
					d = elementDescription.distanceToReachSegment + fogZone.visibility
				}
				if (c >= 0 && c <= len) {
					var position = new Point1d(segment, c, 0)
					var result = new CullingResult1d<RoadObject>(
						IntersectionType::INSIDE,
						new FogWall(position),
						d,
						0,
						true,
						true,
						null)
					result.add
				}
			}
		}
		
	}

}
